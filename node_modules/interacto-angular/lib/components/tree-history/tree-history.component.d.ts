import { AfterViewInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Binding, PartialPointBinder, TreeUndoHistory, UndoableTreeNode } from 'interacto';
import { KeyValue } from "@angular/common";
import { UndoableSnapshot } from "interacto/dist/api/undo/Undoable";
import * as i0 from "@angular/core";
/**
 * The Angular component for display a tree-based undo/redo history
 */
export declare class TreeHistoryComponent implements OnDestroy, AfterViewInit {
    history: TreeUndoHistory;
    private changeDetect;
    width?: string;
    svgViewportWidth: number;
    svgViewportHeight: number;
    svgIconSize: number;
    rootRenderer: UndoableSnapshot;
    widthcss: string;
    cache: Record<number, unknown>;
    cacheRoot: unknown | undefined;
    private subscriptionUndos;
    private subscriptionRedos;
    constructor(history: TreeUndoHistory, changeDetect: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    depth(undoableNode: UndoableTreeNode | undefined): number;
    private createHtmlTag;
    private undoButtonSnapshot_;
    undoButtonSnapshot(node: UndoableTreeNode | undefined, div: HTMLDivElement): string | undefined;
    clickBinders(binder: PartialPointBinder, position: number): Array<Binding<any, any, any>>;
    getTop(position: KeyValue<number, number>): number;
    getLeft(position: KeyValue<number, number>): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeHistoryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TreeHistoryComponent, "io-tree-history", never, { "width": "width"; "svgViewportWidth": "svgViewportWidth"; "svgViewportHeight": "svgViewportHeight"; "svgIconSize": "svgIconSize"; "rootRenderer": "rootRenderer"; }, {}, never, never, false>;
}
