import { ChangeDetectorRef, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialMultiTouchBinder, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import * as i0 from "@angular/core";
export declare class SwipeBinderDirective extends InteractoBinderDirective<HTMLElement, PartialMultiTouchBinder> {
    private bindings;
    private readonly swipeBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLElement>, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef, bindings: Bindings<UndoHistoryBase>);
    /**
     * Defines whether the swipe is horizontal or vertical
     */
    horizontal: boolean;
    /**
     * The minimal minVelocity to reach for validating the swipe. In pixels per second.
     */
    minVelocity: number;
    /**
     * The minimal distance from the starting point to the release point for validating the swipe
     */
    minLength: number;
    /**
     * The tolerance rate in pixels accepted while executing the swipe
     */
    pxTolerance: number;
    /**
     * The number of touches required to start the interaction
     */
    nbTouches: number;
    /**
     * Starts the creation of a binding using the swipe interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioSwipe(fn: ((partialBinder: PartialMultiTouchBinder, widget: HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialMultiTouchBinder;
    protected getOutputEvent(): EventEmitter<PartialMultiTouchBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SwipeBinderDirective, [{ optional: true; host: true; }, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SwipeBinderDirective, "[ioSwipe]", never, { "horizontal": "horizontal"; "minVelocity": "minVelocity"; "minLength": "minLength"; "pxTolerance": "pxTolerance"; "nbTouches": "nbTouches"; "ioSwipe": "ioSwipe"; }, { "swipeBinder": "swipeBinder"; }, never, never, false>;
}
