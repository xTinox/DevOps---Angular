import { ChangeDetectorRef, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialMultiTouchBinder, UndoHistoryBase } from 'interacto';
import { OnDynamicDirective } from './on-dynamic.directive';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
export declare class PanBinderDirective extends InteractoBinderDirective<HTMLElement, PartialMultiTouchBinder> {
    private bindings;
    private readonly panBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLElement>, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef, bindings: Bindings<UndoHistoryBase>);
    /**
     * Defines whether the pan is horizontal or vertical
     */
    horizontal: boolean;
    /**
     * The minimal distance from the starting point to the release point for validating the pan
     */
    minLength: number;
    /**
     * The tolerance rate in pixels accepted while executing the pan
     */
    pxTolerance: number;
    /**
     * The number of touches required to start the interaction
     */
    nbTouches: number;
    /**
     * Starts the creation of a binding using the pan interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioPan(fn: ((partialBinder: PartialMultiTouchBinder, widget: HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialMultiTouchBinder;
    protected getOutputEvent(): EventEmitter<PartialMultiTouchBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PanBinderDirective, [{ optional: true; host: true; }, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PanBinderDirective, "[ioPan]", never, { "horizontal": "horizontal"; "minLength": "minLength"; "pxTolerance": "pxTolerance"; "nbTouches": "nbTouches"; "ioPan": "ioPan"; }, { "panBinder": "panBinder"; }, never, never, false>;
}
