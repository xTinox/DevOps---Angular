import { ChangeDetectorRef, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialTapBinder, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import * as i0 from "@angular/core";
export declare class TapBinderDirective extends InteractoBinderDirective<HTMLElement, PartialTapBinder> {
    private bindings;
    private readonly tapBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLElement>, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef, bindings: Bindings<UndoHistoryBase>);
    /**
     * The number of taps expected to end the interaction.
     * If this number is not reached after a timeout, the interaction is cancelled.
     */
    nbTaps: number;
    /**
     * Starts the creation of a binding using the tap interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioTap(fn: ((partialBinder: PartialTapBinder, widget: HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialTapBinder;
    protected getOutputEvent(): EventEmitter<PartialTapBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TapBinderDirective, [{ optional: true; host: true; }, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TapBinderDirective, "[ioTap]", never, { "nbTaps": "nbTaps"; "ioTap": "ioTap"; }, { "tapBinder": "tapBinder"; }, never, never, false>;
}
