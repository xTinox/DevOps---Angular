import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, Interaction, InteractionCmdBinder, Undo, UndoHistoryBase, WidgetData } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
export declare type PartialUndoButtonBinder = InteractionCmdBinder<Undo, Interaction<WidgetData<HTMLButtonElement>>, WidgetData<HTMLButtonElement>>;
export declare class UndoBinderDirective extends InteractoBinderDirective<HTMLButtonElement, PartialUndoButtonBinder> implements AfterContentInit, OnDestroy {
    private bindings;
    private readonly undoObs;
    constructor(element: ElementRef<HTMLButtonElement>, viewContainerRef: ViewContainerRef, bindings: Bindings<UndoHistoryBase>);
    set ioUndo(fn: ((partialBinder: PartialUndoButtonBinder, widget: HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    private updateUndo;
    ngAfterContentInit(): void;
    protected createPartialBinder(): PartialUndoButtonBinder;
    ngOnDestroy(): void;
    protected getOutputEvent(): EventEmitter<PartialUndoButtonBinder> | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<UndoBinderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<UndoBinderDirective, "button:ioUndo,button:[ioUndo]", never, { "ioUndo": "ioUndo"; }, {}, never, never, false>;
}
