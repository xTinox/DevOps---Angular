import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { OnDynamicDirective } from './on-dynamic.directive';
import { Binding, InteractionBinder, InteractionCmdBinder, KeyInteractionUpdateBinder } from 'interacto';
import * as i0 from "@angular/core";
/**
 * Base class for Interacto's interactions Directives
 * @typeParam T - The type of the HTML element on which the directive operate
 * @typeParam B - The type of the partial binder the directive will produce
 */
export declare abstract class InteractoBinderDirective<E, B extends InteractionBinder<any, any> | KeyInteractionUpdateBinder<any, any> | InteractionCmdBinder<any, any, any>> implements AfterContentInit, OnDestroy {
    protected onDyn: OnDynamicDirective | undefined;
    protected element: ElementRef<E> | E;
    protected viewContainerRef: ViewContainerRef;
    protected changeDetectorRef?: ChangeDetectorRef | undefined;
    protected inputSet: boolean;
    protected binding: Array<Binding<any, any, any>> | undefined;
    protected constructor(onDyn: OnDynamicDirective | undefined, element: ElementRef<E> | E, viewContainerRef: ViewContainerRef, changeDetectorRef?: ChangeDetectorRef | undefined);
    protected abstract createPartialBinder(): B;
    protected checkFnName(fn: Function | undefined | string): string | undefined;
    protected callBinder(fn: ((partialBinder: B, widget: E) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string): void;
    protected getElementContent(): E;
    /**
     * Finds the host component. Hack...
     * @param fnName The name of the function to call for building the binding
     */
    protected getComponent(fnName: string): any;
    ngAfterContentInit(): void;
    protected abstract getOutputEvent(): EventEmitter<B> | undefined;
    ngOnDestroy(): void;
    protected completePartialBinder(): B;
    static ɵfac: i0.ɵɵFactoryDeclaration<InteractoBinderDirective<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<InteractoBinderDirective<any, any>, never, never, {}, {}, never, never, false>;
}
