import { ChangeDetectorRef, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialMultiTouchBinder, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import * as i0 from "@angular/core";
export declare class MultiTouchBinderDirective extends InteractoBinderDirective<HTMLElement, PartialMultiTouchBinder> {
    private bindings;
    private readonly multiTouchBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLElement>, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef, bindings: Bindings<UndoHistoryBase>);
    /**
     * The number of required touches.
     * A multi-touch starts when all its touches have started.
     * A multi-touch ends when the number of required touches is greater than the number of touches.
     */
    nbTouches: number;
    /**
     * Starts the creation of a binding using the multi touch interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioMultiTouch(fn: ((partialBinder: PartialMultiTouchBinder, widget: HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialMultiTouchBinder;
    protected getOutputEvent(): EventEmitter<PartialMultiTouchBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiTouchBinderDirective, [{ optional: true; host: true; }, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MultiTouchBinderDirective, "[ioMultiTouch]", never, { "nbTouches": "nbTouches"; "ioMultiTouch": "ioMultiTouch"; }, { "multiTouchBinder": "multiTouchBinder"; }, never, never, false>;
}
