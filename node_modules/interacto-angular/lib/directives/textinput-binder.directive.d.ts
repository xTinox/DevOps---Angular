import { ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import { PartialTextInputBinder } from 'interacto/dist/api/binding/Bindings';
import * as i0 from "@angular/core";
export declare class TextInputBinderDirective extends InteractoBinderDirective<HTMLInputElement, PartialTextInputBinder> {
    private bindings;
    private readonly textinputBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLInputElement>, viewContainerRef: ViewContainerRef, bindings: Bindings<UndoHistoryBase>);
    set ioTextinput(fn: ((partialBinder: PartialTextInputBinder, widget: HTMLInputElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialTextInputBinder;
    protected getOutputEvent(): EventEmitter<PartialTextInputBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TextInputBinderDirective, [{ optional: true; host: true; }, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TextInputBinderDirective, "input:[ioTextinput][type=text], [ioTextinput] [ioOnDynamic]", never, { "ioTextinput": "ioTextinput"; }, { "textinputBinder": "textinputBinder"; }, never, never, false>;
}
