import { ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialButtonBinder, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import * as i0 from "@angular/core";
export declare class ButtonBinderDirective extends InteractoBinderDirective<HTMLButtonElement | HTMLElement, PartialButtonBinder> {
    private bindings;
    private readonly buttonBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLButtonElement | HTMLElement>, viewContainerRef: ViewContainerRef, bindings: Bindings<UndoHistoryBase>);
    set ioButton(fn: ((partialBinder: PartialButtonBinder, widget: HTMLButtonElement | HTMLElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialButtonBinder;
    protected getOutputEvent(): EventEmitter<PartialButtonBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ButtonBinderDirective, [{ optional: true; host: true; }, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ButtonBinderDirective, "button:[ioButton],[ioButton] [ioOnDynamic]", never, { "ioButton": "ioButton"; }, { "buttonBinder": "buttonBinder"; }, never, never, false>;
}
