import { ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { Binding, Bindings, PartialInputBinder, UndoHistoryBase } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import { OnDynamicDirective } from './on-dynamic.directive';
import * as i0 from "@angular/core";
export declare class InputBinderDirective extends InteractoBinderDirective<HTMLInputElement, PartialInputBinder> {
    private bindings;
    private readonly inputBinder;
    constructor(onDyn: OnDynamicDirective, element: ElementRef<HTMLInputElement>, viewContainerRef: ViewContainerRef, bindings: Bindings<UndoHistoryBase>);
    set ioInput(fn: ((partialBinder: PartialInputBinder, widget: HTMLInputElement) => Binding<any, any, any> | Array<Binding<any, any, any>> | void) | undefined | string);
    protected createPartialBinder(): PartialInputBinder;
    protected getOutputEvent(): EventEmitter<PartialInputBinder>;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputBinderDirective, [{ optional: true; host: true; }, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<InputBinderDirective, "input:[ioInput] :not([type=text]), [ioInput] [ioOnDynamic]", never, { "ioInput": "ioInput"; }, { "inputBinder": "inputBinder"; }, never, never, false>;
}
