import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class MouseleaveBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * The expected number of clicks.
         */
        this.bubbling = false;
        this.mouseleaveBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the mouse press interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioMouseleave(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        const withbubbling = typeof this.bubbling === 'boolean' ? this.bubbling : this.bubbling === 'true';
        return this.bindings.mouseLeaveBinder(withbubbling);
    }
    getOutputEvent() {
        return this.mouseleaveBinder;
    }
}
MouseleaveBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MouseleaveBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
MouseleaveBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: MouseleaveBinderDirective, selector: "[ioMouseleave]", inputs: { bubbling: "bubbling", ioMouseleave: "ioMouseleave" }, outputs: { mouseleaveBinder: "mouseleaveBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MouseleaveBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioMouseleave]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { mouseleaveBinder: [{
                type: Output
            }], bubbling: [{
                type: Input
            }], ioMouseleave: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2VsZWF2ZS1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL21vdXNlbGVhdmUtYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUV0SSxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsd0JBQXlEO0lBSXRHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQWdDLEVBQ2hDLGdCQUFrQyxFQUNsQyxpQkFBb0MsRUFDNUIsUUFBbUM7UUFDckQsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUR6QyxhQUFRLEdBQVIsUUFBUSxDQUEyQjtRQUt2RDs7V0FFRztRQUVILGFBQVEsR0FBcUIsS0FBSyxDQUFDO1FBUGpDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztJQUNqRSxDQUFDO0lBU0Q7OztPQUdHO0lBQ0gsSUFDSSxZQUFZLENBQUMsRUFBb0o7UUFDbkssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE1BQU0sWUFBWSxHQUFHLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDO1FBQ25HLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDOztzSEFwQ1UseUJBQXlCOzBHQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFIckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySkFGWixnQkFBZ0I7c0JBRGhDLE1BQU07Z0JBZ0JQLFFBQVE7c0JBRFAsS0FBSztnQkFTRixZQUFZO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbFBvaW50QmluZGVyLCBVbmRvSGlzdG9yeUJhc2V9IGZyb20gJ2ludGVyYWN0byc7XG5pbXBvcnQge0ludGVyYWN0b0JpbmRlckRpcmVjdGl2ZX0gZnJvbSAnLi9pbnRlcmFjdG8tYmluZGVyLWRpcmVjdGl2ZSc7XG5pbXBvcnQge09uRHluYW1pY0RpcmVjdGl2ZX0gZnJvbSAnLi9vbi1keW5hbWljLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpb01vdXNlbGVhdmVdJ1xufSlcbmV4cG9ydCBjbGFzcyBNb3VzZWxlYXZlQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsUG9pbnRCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgbW91c2VsZWF2ZUJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB0aGlzLm1vdXNlbGVhdmVCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludEJpbmRlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZXhwZWN0ZWQgbnVtYmVyIG9mIGNsaWNrcy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGJ1YmJsaW5nOiBib29sZWFuIHwgc3RyaW5nID0gZmFsc2U7XG5cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIG1vdXNlIHByZXNzIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb01vdXNlbGVhdmUoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFBvaW50QmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbFBvaW50QmluZGVyIHtcbiAgICBjb25zdCB3aXRoYnViYmxpbmcgPSB0eXBlb2YgdGhpcy5idWJibGluZyA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5idWJibGluZyA6IHRoaXMuYnViYmxpbmcgPT09ICd0cnVlJztcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5tb3VzZUxlYXZlQmluZGVyKHdpdGhidWJibGluZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLm1vdXNlbGVhdmVCaW5kZXI7XG4gIH1cbn1cbiJdfQ==