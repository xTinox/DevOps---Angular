import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class ClicksBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * The expected number of clicks.
         */
        this.count = 2;
        this.clicksBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the clicks interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioClicks(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        let countValue = typeof this.count === 'number' ? this.count : parseInt(this.count, 0);
        if (isNaN(countValue)) {
            console.log('Cannot create a clicks binder since the value of number is ' +
                'not a number (in string or number format). So using the default value: 2');
            countValue = 2;
        }
        return this.bindings.clicksBinder(countValue);
    }
    getOutputEvent() {
        return this.clicksBinder;
    }
}
ClicksBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: ClicksBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
ClicksBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: ClicksBinderDirective, selector: "[ioClicks]", inputs: { count: "count", ioClicks: "ioClicks" }, outputs: { clicksBinder: "clicksBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: ClicksBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioClicks]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { clicksBinder: [{
                type: Output
            }], count: [{
                type: Input
            }], ioClicks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2tzLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvY2xpY2tzLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixTQUFTLEVBQWMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFHdEksT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFLdEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHdCQUEwRDtJQUluRyxZQUFnQyxLQUF5QixFQUM3QyxPQUFnQyxFQUNoQyxnQkFBa0MsRUFDbEMsaUJBQW9DLEVBQzVCLFFBQW1DO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFEekMsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFLdkQ7O1dBRUc7UUFFSCxVQUFLLEdBQW9CLENBQUMsQ0FBQztRQVB6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDO0lBQzlELENBQUM7SUFRRDs7O09BR0c7SUFDSCxJQUNJLFFBQVEsQ0FBQyxFQUFxSjtRQUNoSyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsSUFBSSxVQUFVLEdBQUcsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdkYsSUFBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2REFBNkQ7Z0JBQ3ZFLDBFQUEwRSxDQUFDLENBQUM7WUFDOUUsVUFBVSxHQUFHLENBQUMsQ0FBQztTQUNoQjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7O2tIQTFDVSxxQkFBcUI7c0dBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQUhqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO2lCQUN2Qjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySkFGWixZQUFZO3NCQUQ1QixNQUFNO2dCQWdCUCxLQUFLO3NCQURKLEtBQUs7Z0JBUUYsUUFBUTtzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIFBhcnRpYWxQb2ludHNCaW5kZXIsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvQ2xpY2tzXSdcbn0pXG5leHBvcnQgY2xhc3MgQ2xpY2tzQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsUG9pbnRzQmluZGVyPiB7XG4gIEBPdXRwdXQoKVxuICBwcml2YXRlIHJlYWRvbmx5IGNsaWNrc0JpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludHNCaW5kZXI+O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBIb3N0KCkgb25EeW46IE9uRHluYW1pY0RpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKG9uRHluLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgdGhpcy5jbGlja3NCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludHNCaW5kZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGV4cGVjdGVkIG51bWJlciBvZiBjbGlja3MuXG4gICAqL1xuICBASW5wdXQoKVxuICBjb3VudDogbnVtYmVyIHwgc3RyaW5nID0gMjtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIGNsaWNrcyBpbnRlcmFjdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb25maWd1cmUgdGhlIGJpbmRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaW9DbGlja3MoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFBvaW50c0JpbmRlciwgd2lkZ2V0OiBIVE1MRWxlbWVudCkgPT4gQmluZGluZzxhbnksIGFueSwgYW55PiB8IEFycmF5PEJpbmRpbmc8YW55LCBhbnksIGFueT4+IHwgdm9pZCkgfCB1bmRlZmluZWQgfCBzdHJpbmcpICB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxQb2ludHNCaW5kZXIge1xuICAgIGxldCBjb3VudFZhbHVlID0gdHlwZW9mIHRoaXMuY291bnQgPT09ICdudW1iZXInID8gdGhpcy5jb3VudCA6IHBhcnNlSW50KHRoaXMuY291bnQsIDApO1xuXG4gICAgaWYoaXNOYU4oY291bnRWYWx1ZSkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDYW5ub3QgY3JlYXRlIGEgY2xpY2tzIGJpbmRlciBzaW5jZSB0aGUgdmFsdWUgb2YgbnVtYmVyIGlzICcgK1xuICAgICAgICAnbm90IGEgbnVtYmVyIChpbiBzdHJpbmcgb3IgbnVtYmVyIGZvcm1hdCkuIFNvIHVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlOiAyJyk7XG4gICAgICBjb3VudFZhbHVlID0gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5jbGlja3NCaW5kZXIoY291bnRWYWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludHNCaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy5jbGlja3NCaW5kZXI7XG4gIH1cbn1cbiJdfQ==