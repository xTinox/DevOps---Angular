import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class DragLockBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.dragLockBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the drag lock interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioDragLock(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.dragLockBinder();
    }
    getOutputEvent() {
        return this.dragLockBinder;
    }
}
DragLockBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DragLockBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
DragLockBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: DragLockBinderDirective, selector: "[ioDragLock]", inputs: { ioDragLock: "ioDragLock" }, outputs: { dragLockBinder: "dragLockBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DragLockBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioDragLock]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { dragLockBinder: [{
                type: Output
            }], ioDragLock: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1sb2NrLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZHJhZy1sb2NrLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVuSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsd0JBQStEO0lBSTFHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQWdDLEVBQ2hDLGdCQUFrQyxFQUMxQixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBRXJELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7SUFDckUsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQ0ksVUFBVSxDQUFDLEVBQTBKO1FBQ3ZLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7O29IQTNCVSx1QkFBdUI7d0dBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQUhuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySEFGWixjQUFjO3NCQUQ5QixNQUFNO2dCQWdCSCxVQUFVO3NCQURiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JpbmRpbmcsIEJpbmRpbmdzLCBQYXJ0aWFsUG9pbnRTcmNUZ3RCaW5kZXIsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvRHJhZ0xvY2tdJ1xufSlcbmV4cG9ydCBjbGFzcyBEcmFnTG9ja0JpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MRWxlbWVudCwgUGFydGlhbFBvaW50U3JjVGd0QmluZGVyPiB7XG4gIEBPdXRwdXQoKVxuICBwcml2YXRlIHJlYWRvbmx5IGRyYWdMb2NrQmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbFBvaW50U3JjVGd0QmluZGVyPjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASG9zdCgpIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMuZHJhZ0xvY2tCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludFNyY1RndEJpbmRlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGNyZWF0aW9uIG9mIGEgYmluZGluZyB1c2luZyB0aGUgZHJhZyBsb2NrIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb0RyYWdMb2NrKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxQb2ludFNyY1RndEJpbmRlciwgd2lkZ2V0OiBIVE1MRWxlbWVudCkgPT4gQmluZGluZzxhbnksIGFueSwgYW55PiB8IEFycmF5PEJpbmRpbmc8YW55LCBhbnksIGFueT4+IHwgdm9pZCkgfCB1bmRlZmluZWQgfCBzdHJpbmcpICB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxQb2ludFNyY1RndEJpbmRlciB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ3MuZHJhZ0xvY2tCaW5kZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRPdXRwdXRFdmVudCgpOiBFdmVudEVtaXR0ZXI8UGFydGlhbFBvaW50U3JjVGd0QmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZHJhZ0xvY2tCaW5kZXI7XG4gIH1cbn1cbiJdfQ==