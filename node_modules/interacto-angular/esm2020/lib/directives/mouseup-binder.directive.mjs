import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class MouseupBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.mouseupBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the mouse press interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioMouseup(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.mouseUpBinder();
    }
    getOutputEvent() {
        return this.mouseupBinder;
    }
}
MouseupBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MouseupBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
MouseupBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: MouseupBinderDirective, selector: "[ioMouseup]", inputs: { ioMouseup: "ioMouseup" }, outputs: { mouseupBinder: "mouseupBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MouseupBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioMouseup]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { mouseupBinder: [{
                type: Output
            }], ioMouseup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2V1cC1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL21vdXNldXAtYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRW5ILE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBTXRFLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSx3QkFBeUQ7SUFJbkcsWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQzFCLFFBQW1DO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFEdEIsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFFckQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFDSSxTQUFTLENBQUMsRUFBb0o7UUFDaEssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQzs7bUhBM0JVLHNCQUFzQjt1R0FBdEIsc0JBQXNCOzJGQUF0QixzQkFBc0I7a0JBSGxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJIQUZaLGFBQWE7c0JBRDdCLE1BQU07Z0JBZ0JILFNBQVM7c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIFBhcnRpYWxQb2ludEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9Nb3VzZXVwXSdcbn0pXG5leHBvcnQgY2xhc3MgTW91c2V1cEJpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MRWxlbWVudCwgUGFydGlhbFBvaW50QmluZGVyPiB7XG4gIEBPdXRwdXQoKVxuICBwcml2YXRlIHJlYWRvbmx5IG1vdXNldXBCaW5kZXI6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsUG9pbnRCaW5kZXI+O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBIb3N0KCkgb25EeW46IE9uRHluYW1pY0RpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgYmluZGluZ3M6IEJpbmRpbmdzPFVuZG9IaXN0b3J5QmFzZT4pIHtcbiAgICBzdXBlcihvbkR5biwgZWxlbWVudCwgdmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy5tb3VzZXVwQmluZGVyID0gbmV3IEV2ZW50RW1pdHRlcjxQYXJ0aWFsUG9pbnRCaW5kZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIG1vdXNlIHByZXNzIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb01vdXNldXAoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFBvaW50QmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbFBvaW50QmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5tb3VzZVVwQmluZGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLm1vdXNldXBCaW5kZXI7XG4gIH1cbn1cbiJdfQ==