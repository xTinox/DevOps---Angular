import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class DndBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        this.cancellable = true;
        this.dndBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the key pressure interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioDnd(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.dndBinder(this.cancellable);
    }
    getOutputEvent() {
        return this.dndBinder;
    }
}
DndBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DndBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
DndBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: DndBinderDirective, selector: "[ioDnd]", inputs: { cancellable: "cancellable", ioDnd: "ioDnd" }, outputs: { dndBinder: "dndBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DndBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioDnd]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { dndBinder: [{
                type: Output
            }], cancellable: [{
                type: Input
            }], ioDnd: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZG5kLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixTQUFTLEVBQWMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFdEksT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFNdEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLHdCQUErRDtJQUlyRyxZQUFnQyxLQUF5QixFQUM3QyxPQUFnQyxFQUNoQyxnQkFBa0MsRUFDbEMsaUJBQW9DLEVBQzVCLFFBQW1DO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFEekMsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFNdkQsZ0JBQVcsR0FBRyxJQUFJLENBQUM7UUFKakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksRUFBNEIsQ0FBQztJQUNoRSxDQUFDO0lBS0Q7OztPQUdHO0lBQ0gsSUFDSSxLQUFLLENBQUMsRUFBMEo7UUFDbEssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFUyxjQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzsrR0EvQlUsa0JBQWtCO21HQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFIOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsU0FBUztpQkFDcEI7OzBCQUtjLFFBQVE7OzBCQUFJLElBQUk7MkpBRlosU0FBUztzQkFEekIsTUFBTTtnQkFhUCxXQUFXO3NCQURWLEtBQUs7Z0JBUUYsS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIFBhcnRpYWxQb2ludFNyY1RndEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9EbmRdJ1xufSlcbmV4cG9ydCBjbGFzcyBEbmRCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTEVsZW1lbnQsIFBhcnRpYWxQb2ludFNyY1RndEJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSBkbmRCaW5kZXI6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsUG9pbnRTcmNUZ3RCaW5kZXI+O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBIb3N0KCkgb25EeW46IE9uRHluYW1pY0RpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKG9uRHluLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgdGhpcy5kbmRCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludFNyY1RndEJpbmRlcj4oKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGNhbmNlbGxhYmxlID0gdHJ1ZTtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIGtleSBwcmVzc3VyZSBpbnRlcmFjdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb25maWd1cmUgdGhlIGJpbmRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaW9EbmQoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFBvaW50U3JjVGd0QmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbFBvaW50U3JjVGd0QmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5kbmRCaW5kZXIodGhpcy5jYW5jZWxsYWJsZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxQb2ludFNyY1RndEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLmRuZEJpbmRlcjtcbiAgfVxufVxuIl19