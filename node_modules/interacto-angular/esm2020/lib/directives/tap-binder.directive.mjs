import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class TapBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * The number of taps expected to end the interaction.
         * If this number is not reached after a timeout, the interaction is cancelled.
         */
        this.nbTaps = 2;
        this.tapBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the tap interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioTap(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.tapBinder(this.nbTaps);
    }
    getOutputEvent() {
        return this.tapBinder;
    }
}
TapBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TapBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
TapBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: TapBinderDirective, selector: "[ioTap]", inputs: { nbTaps: "nbTaps", ioTap: "ioTap" }, outputs: { tapBinder: "tapBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TapBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioTap]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { tapBinder: [{
                type: Output
            }], nbTaps: [{
                type: Input
            }], ioTap: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvdGFwLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixTQUFTLEVBQWMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFdEksT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFNdEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLHdCQUF1RDtJQUk3RixZQUFnQyxLQUF5QixFQUM3QyxPQUFnQyxFQUNoQyxnQkFBa0MsRUFDbEMsaUJBQW9DLEVBQzVCLFFBQW1DO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFEekMsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFLdkQ7OztXQUdHO1FBRUgsV0FBTSxHQUFHLENBQUMsQ0FBQztRQVJULElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7SUFDeEQsQ0FBQztJQVNEOzs7T0FHRztJQUNILElBQ0ksS0FBSyxDQUFDLEVBQWtKO1FBQzFKLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7K0dBbkNVLGtCQUFrQjttR0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBSDlCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFNBQVM7aUJBQ3BCOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJKQUZaLFNBQVM7c0JBRHpCLE1BQU07Z0JBaUJQLE1BQU07c0JBREwsS0FBSztnQkFRRixLQUFLO3NCQURSLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbFRhcEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9UYXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBUYXBCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTEVsZW1lbnQsIFBhcnRpYWxUYXBCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgdGFwQmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbFRhcEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB0aGlzLnRhcEJpbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8UGFydGlhbFRhcEJpbmRlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHRhcHMgZXhwZWN0ZWQgdG8gZW5kIHRoZSBpbnRlcmFjdGlvbi5cbiAgICogSWYgdGhpcyBudW1iZXIgaXMgbm90IHJlYWNoZWQgYWZ0ZXIgYSB0aW1lb3V0LCB0aGUgaW50ZXJhY3Rpb24gaXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgQElucHV0KClcbiAgbmJUYXBzID0gMjtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIHRhcCBpbnRlcmFjdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb25maWd1cmUgdGhlIGJpbmRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaW9UYXAoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFRhcEJpbmRlciwgd2lkZ2V0OiBIVE1MRWxlbWVudCkgPT4gQmluZGluZzxhbnksIGFueSwgYW55PiB8IEFycmF5PEJpbmRpbmc8YW55LCBhbnksIGFueT4+IHwgdm9pZCkgfCB1bmRlZmluZWQgfCBzdHJpbmcpICB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxUYXBCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLnRhcEJpbmRlcih0aGlzLm5iVGFwcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxUYXBCaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy50YXBCaW5kZXI7XG4gIH1cbn1cbiJdfQ==