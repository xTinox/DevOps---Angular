import { Directive, Input } from '@angular/core';
import { Redo } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "interacto";
export class RedoBinderDirective extends InteractoBinderDirective {
    constructor(element, viewContainerRef, bindings) {
        super(undefined, element, viewContainerRef);
        this.bindings = bindings;
        this.redoObs = bindings.undoHistory
            .redosObservable()
            .subscribe(_ => {
            this.updateRedo();
        });
    }
    set ioRedo(fn) {
        this.callBinder(fn);
    }
    updateRedo() {
        const elt = this.getElementContent();
        elt.disabled = this.bindings.undoHistory.getLastRedo() === undefined;
        elt.title = this.bindings.undoHistory.getLastOrEmptyRedoMessage();
    }
    ngAfterContentInit() {
        this.updateRedo();
        if (!this.inputSet) {
            const b = this.createPartialBinder()
                .catch(err => {
                console.log(err);
            })
                .bind();
            this.binding = [b];
        }
    }
    createPartialBinder() {
        return this.bindings
            .buttonBinder()
            .on(this.element)
            .toProduce(() => new Redo(this.bindings.undoHistory));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.redoObs.unsubscribe();
    }
    getOutputEvent() {
        return undefined;
    }
}
RedoBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: RedoBinderDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i1.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
RedoBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: RedoBinderDirective, selector: "button:ioRedo,button:[ioRedo]", inputs: { ioRedo: "ioRedo" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: RedoBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button:ioRedo,button:[ioRedo]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i1.Bindings }]; }, propDecorators: { ioRedo: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkby1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL3JlZG8tYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBNEIsS0FBSyxFQUE4QixNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQXVELElBQUksRUFBOEIsTUFBTSxXQUFXLENBQUM7QUFFbEgsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7OztBQU90RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsd0JBQW9FO0lBSTNHLFlBQ0UsT0FBc0MsRUFDdEMsZ0JBQWtDLEVBQzFCLFFBQW1DO1FBQzNDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFEcEMsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsV0FBVzthQUNoQyxlQUFlLEVBQUU7YUFDakIsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQ1csTUFBTSxDQUFDLEVBQXlKO1FBQ3pLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUdPLFVBQVU7UUFDaEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUM7UUFDckUsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ3BFLENBQUM7SUFFZSxrQkFBa0I7UUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtpQkFDakMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDO2lCQUNELElBQUksRUFBRSxDQUFDO1lBRVYsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRO2FBQ2pCLFlBQVksRUFBRTthQUNkLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ2hCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVlLFdBQVc7UUFDekIsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Z0hBeERVLG1CQUFtQjtvR0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBSC9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtpQkFDMUM7dUpBa0JZLE1BQU07c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyQ29udGVudEluaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIEludGVyYWN0aW9uLCBJbnRlcmFjdGlvbkNtZEJpbmRlciwgUmVkbywgVW5kb0hpc3RvcnlCYXNlLCBXaWRnZXREYXRhfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuXG5leHBvcnQgdHlwZSBQYXJ0aWFsUmVkb0J1dHRvbkJpbmRlciA9IEludGVyYWN0aW9uQ21kQmluZGVyPFJlZG8sIEludGVyYWN0aW9uPFdpZGdldERhdGE8SFRNTEJ1dHRvbkVsZW1lbnQ+PiwgV2lkZ2V0RGF0YTxIVE1MQnV0dG9uRWxlbWVudD4+O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdidXR0b246aW9SZWRvLGJ1dHRvbjpbaW9SZWRvXSdcbn0pXG5leHBvcnQgY2xhc3MgUmVkb0JpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MQnV0dG9uRWxlbWVudCwgUGFydGlhbFJlZG9CdXR0b25CaW5kZXI+XG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSByZWRvT2JzOiBTdWJzY3JpcHRpb247XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEJ1dHRvbkVsZW1lbnQ+LFxuICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKHVuZGVmaW5lZCwgZWxlbWVudCwgdmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy5yZWRvT2JzID0gYmluZGluZ3MudW5kb0hpc3RvcnlcbiAgICAgIC5yZWRvc09ic2VydmFibGUoKVxuICAgICAgLnN1YnNjcmliZShfID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVSZWRvKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgaW9SZWRvKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxSZWRvQnV0dG9uQmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuXG4gIHByaXZhdGUgdXBkYXRlUmVkbygpOiB2b2lkIHtcbiAgICBjb25zdCBlbHQgPSB0aGlzLmdldEVsZW1lbnRDb250ZW50KCk7XG4gICAgZWx0LmRpc2FibGVkID0gdGhpcy5iaW5kaW5ncy51bmRvSGlzdG9yeS5nZXRMYXN0UmVkbygpID09PSB1bmRlZmluZWQ7XG4gICAgZWx0LnRpdGxlID0gdGhpcy5iaW5kaW5ncy51bmRvSGlzdG9yeS5nZXRMYXN0T3JFbXB0eVJlZG9NZXNzYWdlKCk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlUmVkbygpO1xuXG4gICAgaWYgKCF0aGlzLmlucHV0U2V0KSB7XG4gICAgICBjb25zdCBiID0gdGhpcy5jcmVhdGVQYXJ0aWFsQmluZGVyKClcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmJpbmQoKTtcblxuICAgICAgdGhpcy5iaW5kaW5nID0gW2JdO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxSZWRvQnV0dG9uQmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5nc1xuICAgICAgLmJ1dHRvbkJpbmRlcigpXG4gICAgICAub24odGhpcy5lbGVtZW50KVxuICAgICAgLnRvUHJvZHVjZSgoKSA9PiBuZXcgUmVkbyh0aGlzLmJpbmRpbmdzLnVuZG9IaXN0b3J5KSk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAgICB0aGlzLnJlZG9PYnMudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRPdXRwdXRFdmVudCgpOiBFdmVudEVtaXR0ZXI8UGFydGlhbFJlZG9CdXR0b25CaW5kZXI+IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=