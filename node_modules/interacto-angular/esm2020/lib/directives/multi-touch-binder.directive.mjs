import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class MultiTouchBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * The number of required touches.
         * A multi-touch starts when all its touches have started.
         * A multi-touch ends when the number of required touches is greater than the number of touches.
         */
        this.nbTouches = 2;
        this.multiTouchBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the multi touch interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioMultiTouch(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.multiTouchBinder(this.nbTouches);
    }
    getOutputEvent() {
        return this.multiTouchBinder;
    }
}
MultiTouchBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MultiTouchBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
MultiTouchBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: MultiTouchBinderDirective, selector: "[ioMultiTouch]", inputs: { nbTouches: "nbTouches", ioMultiTouch: "ioMultiTouch" }, outputs: { multiTouchBinder: "multiTouchBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MultiTouchBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioMultiTouch]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { multiTouchBinder: [{
                type: Output
            }], nbTouches: [{
                type: Input
            }], ioMultiTouch: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdG91Y2gtYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9tdWx0aS10b3VjaC1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRXRJLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBTXRFLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSx3QkFBOEQ7SUFJM0csWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQ2xDLGlCQUFvQyxFQUM1QixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRHpDLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBS3ZEOzs7O1dBSUc7UUFFSCxjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBVFosSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO0lBQ3RFLENBQUM7SUFVRDs7O09BR0c7SUFDSCxJQUNJLFlBQVksQ0FBQyxFQUF5SjtRQUN4SyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDOztzSEFwQ1UseUJBQXlCOzBHQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFIckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySkFGWixnQkFBZ0I7c0JBRGhDLE1BQU07Z0JBa0JQLFNBQVM7c0JBRFIsS0FBSztnQkFRRixZQUFZO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbE11bHRpVG91Y2hCaW5kZXIsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvTXVsdGlUb3VjaF0nXG59KVxuZXhwb3J0IGNsYXNzIE11bHRpVG91Y2hCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTEVsZW1lbnQsIFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyPiB7XG4gIEBPdXRwdXQoKVxuICBwcml2YXRlIHJlYWRvbmx5IG11bHRpVG91Y2hCaW5kZXI6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsTXVsdGlUb3VjaEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB0aGlzLm11bHRpVG91Y2hCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgcmVxdWlyZWQgdG91Y2hlcy5cbiAgICogQSBtdWx0aS10b3VjaCBzdGFydHMgd2hlbiBhbGwgaXRzIHRvdWNoZXMgaGF2ZSBzdGFydGVkLlxuICAgKiBBIG11bHRpLXRvdWNoIGVuZHMgd2hlbiB0aGUgbnVtYmVyIG9mIHJlcXVpcmVkIHRvdWNoZXMgaXMgZ3JlYXRlciB0aGFuIHRoZSBudW1iZXIgb2YgdG91Y2hlcy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIG5iVG91Y2hlcyA9IDI7XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgY3JlYXRpb24gb2YgYSBiaW5kaW5nIHVzaW5nIHRoZSBtdWx0aSB0b3VjaCBpbnRlcmFjdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb25maWd1cmUgdGhlIGJpbmRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaW9NdWx0aVRvdWNoKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbE11bHRpVG91Y2hCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLm11bHRpVG91Y2hCaW5kZXIodGhpcy5uYlRvdWNoZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsTXVsdGlUb3VjaEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLm11bHRpVG91Y2hCaW5kZXI7XG4gIH1cbn1cbiJdfQ==