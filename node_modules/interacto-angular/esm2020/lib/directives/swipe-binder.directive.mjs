import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class SwipeBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * Defines whether the swipe is horizontal or vertical
         */
        this.horizontal = true;
        /**
         * The minimal minVelocity to reach for validating the swipe. In pixels per second.
         */
        this.minVelocity = 100;
        /**
         * The minimal distance from the starting point to the release point for validating the swipe
         */
        this.minLength = 100;
        /**
         * The tolerance rate in pixels accepted while executing the swipe
         */
        this.pxTolerance = 20;
        /**
         * The number of touches required to start the interaction
         */
        this.nbTouches = 1;
        this.swipeBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the swipe interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioSwipe(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.swipeBinder(this.horizontal, this.minVelocity, this.minLength, this.nbTouches, this.pxTolerance);
    }
    getOutputEvent() {
        return this.swipeBinder;
    }
}
SwipeBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: SwipeBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
SwipeBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: SwipeBinderDirective, selector: "[ioSwipe]", inputs: { horizontal: "horizontal", minVelocity: "minVelocity", minLength: "minLength", pxTolerance: "pxTolerance", nbTouches: "nbTouches", ioSwipe: "ioSwipe" }, outputs: { swipeBinder: "swipeBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: SwipeBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioSwipe]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { swipeBinder: [{
                type: Output
            }], horizontal: [{
                type: Input
            }], minVelocity: [{
                type: Input
            }], minLength: [{
                type: Input
            }], pxTolerance: [{
                type: Input
            }], nbTouches: [{
                type: Input
            }], ioSwipe: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUtYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9zd2lwZS1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRXRJLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBTXRFLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx3QkFBOEQ7SUFJdEcsWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQ2xDLGlCQUFvQyxFQUM1QixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRHpDLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBS3ZEOztXQUVHO1FBRUgsZUFBVSxHQUFHLElBQUksQ0FBQztRQUVsQjs7V0FFRztRQUVILGdCQUFXLEdBQUcsR0FBRyxDQUFDO1FBRWxCOztXQUVHO1FBRUgsY0FBUyxHQUFHLEdBQUcsQ0FBQztRQUVoQjs7V0FFRztRQUVILGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRWpCOztXQUVHO1FBRUgsY0FBUyxHQUFHLENBQUMsQ0FBQztRQS9CWixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUEyQixDQUFDO0lBQ2pFLENBQUM7SUFnQ0Q7OztPQUdHO0lBQ0gsSUFDSSxPQUFPLENBQUMsRUFBeUo7UUFDbkssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEgsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7O2lIQTFEVSxvQkFBb0I7cUdBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO2lCQUN0Qjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySkFGWixXQUFXO3NCQUQzQixNQUFNO2dCQWdCUCxVQUFVO3NCQURULEtBQUs7Z0JBT04sV0FBVztzQkFEVixLQUFLO2dCQU9OLFNBQVM7c0JBRFIsS0FBSztnQkFPTixXQUFXO3NCQURWLEtBQUs7Z0JBT04sU0FBUztzQkFEUixLQUFLO2dCQVFGLE9BQU87c0JBRFYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JpbmRpbmcsIEJpbmRpbmdzLCBQYXJ0aWFsTXVsdGlUb3VjaEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9Td2lwZV0nXG59KVxuZXhwb3J0IGNsYXNzIFN3aXBlQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsTXVsdGlUb3VjaEJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSBzd2lwZUJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyPjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASG9zdCgpIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgYmluZGluZ3M6IEJpbmRpbmdzPFVuZG9IaXN0b3J5QmFzZT4pIHtcbiAgICBzdXBlcihvbkR5biwgZWxlbWVudCwgdmlld0NvbnRhaW5lclJlZiwgY2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIHRoaXMuc3dpcGVCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciB0aGUgc3dpcGUgaXMgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbFxuICAgKi9cbiAgQElucHV0KClcbiAgaG9yaXpvbnRhbCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbWFsIG1pblZlbG9jaXR5IHRvIHJlYWNoIGZvciB2YWxpZGF0aW5nIHRoZSBzd2lwZS4gSW4gcGl4ZWxzIHBlciBzZWNvbmQuXG4gICAqL1xuICBASW5wdXQoKVxuICBtaW5WZWxvY2l0eSA9IDEwMDtcblxuICAvKipcbiAgICogVGhlIG1pbmltYWwgZGlzdGFuY2UgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnQgdG8gdGhlIHJlbGVhc2UgcG9pbnQgZm9yIHZhbGlkYXRpbmcgdGhlIHN3aXBlXG4gICAqL1xuICBASW5wdXQoKVxuICBtaW5MZW5ndGggPSAxMDA7XG5cbiAgLyoqXG4gICAqIFRoZSB0b2xlcmFuY2UgcmF0ZSBpbiBwaXhlbHMgYWNjZXB0ZWQgd2hpbGUgZXhlY3V0aW5nIHRoZSBzd2lwZVxuICAgKi9cbiAgQElucHV0KClcbiAgcHhUb2xlcmFuY2UgPSAyMDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiB0b3VjaGVzIHJlcXVpcmVkIHRvIHN0YXJ0IHRoZSBpbnRlcmFjdGlvblxuICAgKi9cbiAgQElucHV0KClcbiAgbmJUb3VjaGVzID0gMTtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIHN3aXBlIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb1N3aXBlKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxNdWx0aVRvdWNoQmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbE11bHRpVG91Y2hCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLnN3aXBlQmluZGVyKHRoaXMuaG9yaXpvbnRhbCwgdGhpcy5taW5WZWxvY2l0eSwgdGhpcy5taW5MZW5ndGgsIHRoaXMubmJUb3VjaGVzLCB0aGlzLnB4VG9sZXJhbmNlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRPdXRwdXRFdmVudCgpOiBFdmVudEVtaXR0ZXI8UGFydGlhbE11bHRpVG91Y2hCaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy5zd2lwZUJpbmRlcjtcbiAgfVxufVxuIl19