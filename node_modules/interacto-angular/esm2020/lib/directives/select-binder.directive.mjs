import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class SelectBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.selectBinder = new EventEmitter();
    }
    set ioSelect(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.comboBoxBinder();
    }
    getOutputEvent() {
        return this.selectBinder;
    }
}
SelectBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: SelectBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
SelectBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: SelectBinderDirective, selector: "select:[ioSelect], [ioSelect] [ioOnDynamic]", inputs: { ioSelect: "ioSelect" }, outputs: { selectBinder: "selectBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: SelectBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'select:[ioSelect], [ioSelect] [ioOnDynamic]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { selectBinder: [{
                type: Output
            }], ioSelect: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvc2VsZWN0LWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVuSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsd0JBQWdFO0lBSXpHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQXNDLEVBQ3RDLGdCQUFrQyxFQUMxQixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBRXJELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7SUFDOUQsQ0FBQztJQUVELElBQ0ksUUFBUSxDQUFDLEVBQTJKO1FBQ3RLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7O2tIQXZCVSxxQkFBcUI7c0dBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQUhqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw2Q0FBNkM7aUJBQ3hEOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJIQUZaLFlBQVk7c0JBRDVCLE1BQU07Z0JBWUgsUUFBUTtzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbFNlbGVjdEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdzZWxlY3Q6W2lvU2VsZWN0XSwgW2lvU2VsZWN0XSBbaW9PbkR5bmFtaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTFNlbGVjdEVsZW1lbnQsIFBhcnRpYWxTZWxlY3RCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgc2VsZWN0QmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbFNlbGVjdEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxTZWxlY3RFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKG9uRHluLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmKTtcbiAgICB0aGlzLnNlbGVjdEJpbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8UGFydGlhbFNlbGVjdEJpbmRlcj4oKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBpb1NlbGVjdChmbjogKChwYXJ0aWFsQmluZGVyOiBQYXJ0aWFsU2VsZWN0QmluZGVyLCB3aWRnZXQ6IEhUTUxTZWxlY3RFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsU2VsZWN0QmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5jb21ib0JveEJpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsU2VsZWN0QmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0QmluZGVyO1xuICB9XG59XG4iXX0=