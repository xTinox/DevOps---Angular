import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "../base/angular-bindings";
import * as i3 from "@angular/material/select";
export class MatSelectBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, 
    // element: ElementRef<HTMLElement>,
    viewContainerRef, bindings, 
    // The MatSelect component
    select) {
        super(onDyn, select, viewContainerRef);
        this.bindings = bindings;
        this.matSelectBinder = new EventEmitter();
    }
    set ioMatSelect(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.matSelectBinder();
    }
    getOutputEvent() {
        return this.matSelectBinder;
    }
}
MatSelectBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MatSelectBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ViewContainerRef }, { token: i2.AngularBindings }, { token: i3.MatSelect }], target: i0.ɵɵFactoryTarget.Directive });
MatSelectBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: MatSelectBinderDirective, selector: "mat-select:[ioMatSelect],[ioMatSelect] [ioOnDynamic]", inputs: { ioMatSelect: "ioMatSelect" }, outputs: { matSelectBinder: "matSelectBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MatSelectBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'mat-select:[ioMatSelect],[ioMatSelect] [ioOnDynamic]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ViewContainerRef }, { type: i2.AngularBindings }, { type: i3.MatSelect }]; }, propDecorators: { matSelectBinder: [{
                type: Output
            }], ioMatSelect: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL21hdC1zZWxlY3QtYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRXZHLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7OztBQVF0RSxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsd0JBQTJEO0lBSXZHLFlBQWdDLEtBQXlCO0lBQzdDLG9DQUFvQztJQUNwQyxnQkFBa0MsRUFDMUIsUUFBMEM7SUFDbEQsMEJBQTBCO0lBQzFCLE1BQWlCO1FBQzNCLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFIckIsYUFBUSxHQUFSLFFBQVEsQ0FBa0M7UUFJNUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLFlBQVksRUFBMEIsQ0FBQztJQUNwRSxDQUFDO0lBRUQsSUFDSSxXQUFXLENBQUMsRUFBc0o7UUFDcEssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQzs7cUhBekJVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7a0JBSHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNEQUFzRDtpQkFDakU7OzBCQUtjLFFBQVE7OzBCQUFJLElBQUk7aUlBRlosZUFBZTtzQkFEL0IsTUFBTTtnQkFjSCxXQUFXO3NCQURkLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JpbmRpbmcsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcbmltcG9ydCB7QW5ndWxhckJpbmRpbmdzLCBQYXJ0aWFsTWF0U2VsZWN0QmluZGVyfSBmcm9tICcuLi9iYXNlL2FuZ3VsYXItYmluZGluZ3MnO1xuaW1wb3J0IHtNYXRTZWxlY3R9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NlbGVjdCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ21hdC1zZWxlY3Q6W2lvTWF0U2VsZWN0XSxbaW9NYXRTZWxlY3RdIFtpb09uRHluYW1pY10nXG59KVxuZXhwb3J0IGNsYXNzIE1hdFNlbGVjdEJpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxNYXRTZWxlY3QsIFBhcnRpYWxNYXRTZWxlY3RCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgbWF0U2VsZWN0QmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbE1hdFNlbGVjdEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAvLyBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQW5ndWxhckJpbmRpbmdzPFVuZG9IaXN0b3J5QmFzZT4sXG4gICAgICAgICAgICAgIC8vIFRoZSBNYXRTZWxlY3QgY29tcG9uZW50XG4gICAgICAgICAgICAgIHNlbGVjdDogTWF0U2VsZWN0KSB7XG4gICAgc3VwZXIob25EeW4sIHNlbGVjdCwgdmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy5tYXRTZWxlY3RCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxNYXRTZWxlY3RCaW5kZXI+KCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgaW9NYXRTZWxlY3QoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbE1hdFNlbGVjdEJpbmRlciwgd2lkZ2V0OiBNYXRTZWxlY3QpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxNYXRTZWxlY3RCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLm1hdFNlbGVjdEJpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsTWF0U2VsZWN0QmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMubWF0U2VsZWN0QmluZGVyO1xuICB9XG59XG4iXX0=