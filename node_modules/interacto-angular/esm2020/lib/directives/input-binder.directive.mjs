import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class InputBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.inputBinder = new EventEmitter();
    }
    set ioInput(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        const elt = this.getElementContent();
        if (elt instanceof HTMLInputElement) {
            switch (elt.type) {
                case 'checkbox':
                case 'radio':
                    return this.bindings.checkboxBinder();
                case 'color':
                    return this.bindings.colorPickerBinder();
                case 'date':
                    return this.bindings.dateBinder();
                case 'number':
                    return this.bindings.spinnerBinder();
            }
        }
        throw new Error('Cannot create a binder on the input.');
    }
    getOutputEvent() {
        return this.inputBinder;
    }
}
InputBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: InputBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
InputBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: InputBinderDirective, selector: "input:[ioInput] :not([type=text]), [ioInput] [ioOnDynamic]", inputs: { ioInput: "ioInput" }, outputs: { inputBinder: "inputBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: InputBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input:[ioInput] :not([type=text]), [ioInput] [ioOnDynamic]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { inputBinder: [{
                type: Output
            }], ioInput: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9pbnB1dC1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQWMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFbkgsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFNdEUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLHdCQUE4RDtJQUl0RyxZQUFnQyxLQUF5QixFQUM3QyxPQUFxQyxFQUNyQyxnQkFBa0MsRUFDMUIsUUFBbUM7UUFDckQsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUR0QixhQUFRLEdBQVIsUUFBUSxDQUEyQjtRQUVyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFzQixDQUFDO0lBQzVELENBQUM7SUFFRCxJQUNJLE9BQU8sQ0FBQyxFQUF5SjtRQUNuSyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFckMsSUFBSSxHQUFHLFlBQVksZ0JBQWdCLEVBQUU7WUFDbkMsUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFO2dCQUNoQixLQUFLLFVBQVUsQ0FBQztnQkFDaEIsS0FBSyxPQUFPO29CQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDeEMsS0FBSyxPQUFPO29CQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUMzQyxLQUFLLE1BQU07b0JBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNwQyxLQUFLLFFBQVE7b0JBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hDO1NBQ0Y7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7O2lIQXZDVSxvQkFBb0I7cUdBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw0REFBNEQ7aUJBQ3ZFOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJIQUZaLFdBQVc7c0JBRDNCLE1BQU07Z0JBWUgsT0FBTztzQkFEVixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbElucHV0QmluZGVyLCBVbmRvSGlzdG9yeUJhc2V9IGZyb20gJ2ludGVyYWN0byc7XG5pbXBvcnQge0ludGVyYWN0b0JpbmRlckRpcmVjdGl2ZX0gZnJvbSAnLi9pbnRlcmFjdG8tYmluZGVyLWRpcmVjdGl2ZSc7XG5pbXBvcnQge09uRHluYW1pY0RpcmVjdGl2ZX0gZnJvbSAnLi9vbi1keW5hbWljLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0Oltpb0lucHV0XSA6bm90KFt0eXBlPXRleHRdKSwgW2lvSW5wdXRdIFtpb09uRHluYW1pY10nXG59KVxuZXhwb3J0IGNsYXNzIElucHV0QmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxJbnB1dEVsZW1lbnQsIFBhcnRpYWxJbnB1dEJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxJbnB1dEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+LFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMuaW5wdXRCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxJbnB1dEJpbmRlcj4oKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBpb0lucHV0KGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxJbnB1dEJpbmRlciwgd2lkZ2V0OiBIVE1MSW5wdXRFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsSW5wdXRCaW5kZXIge1xuICAgIGNvbnN0IGVsdCA9IHRoaXMuZ2V0RWxlbWVudENvbnRlbnQoKTtcblxuICAgIGlmIChlbHQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICBzd2l0Y2ggKGVsdC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLmNoZWNrYm94QmluZGVyKCk7XG4gICAgICAgIGNhc2UgJ2NvbG9yJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5jb2xvclBpY2tlckJpbmRlcigpO1xuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5kYXRlQmluZGVyKCk7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ3Muc3Bpbm5lckJpbmRlcigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSBhIGJpbmRlciBvbiB0aGUgaW5wdXQuJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxJbnB1dEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLmlucHV0QmluZGVyO1xuICB9XG59XG4iXX0=