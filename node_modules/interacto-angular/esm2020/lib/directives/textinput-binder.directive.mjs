import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class TextInputBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.textinputBinder = new EventEmitter();
    }
    set ioTextinput(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.textInputBinder();
    }
    getOutputEvent() {
        return this.textinputBinder;
    }
}
TextInputBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TextInputBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
TextInputBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: TextInputBinderDirective, selector: "input:[ioTextinput][type=text], [ioTextinput] [ioOnDynamic]", inputs: { ioTextinput: "ioTextinput" }, outputs: { textinputBinder: "textinputBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TextInputBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input:[ioTextinput][type=text], [ioTextinput] [ioOnDynamic]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { textinputBinder: [{
                type: Output
            }], ioTextinput: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGlucHV0LWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvdGV4dGlucHV0LWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVuSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU90RSxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsd0JBQWtFO0lBSTlHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQXFDLEVBQ3JDLGdCQUFrQyxFQUMxQixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBRXJELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7SUFDcEUsQ0FBQztJQUVELElBQ0ksV0FBVyxDQUFDLEVBQTZKO1FBQzNLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7O3FIQXZCVSx3QkFBd0I7eUdBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQUhwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw2REFBNkQ7aUJBQ3hFOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJIQUZaLGVBQWU7c0JBRC9CLE1BQU07Z0JBWUgsV0FBVztzQkFEZCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuaW1wb3J0IHtQYXJ0aWFsVGV4dElucHV0QmluZGVyfSBmcm9tICdpbnRlcmFjdG8vZGlzdC9hcGkvYmluZGluZy9CaW5kaW5ncyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0Oltpb1RleHRpbnB1dF1bdHlwZT10ZXh0XSwgW2lvVGV4dGlucHV0XSBbaW9PbkR5bmFtaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBUZXh0SW5wdXRCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTElucHV0RWxlbWVudCwgUGFydGlhbFRleHRJbnB1dEJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSB0ZXh0aW5wdXRCaW5kZXI6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsVGV4dElucHV0QmluZGVyPjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASG9zdCgpIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgYmluZGluZ3M6IEJpbmRpbmdzPFVuZG9IaXN0b3J5QmFzZT4pIHtcbiAgICBzdXBlcihvbkR5biwgZWxlbWVudCwgdmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy50ZXh0aW5wdXRCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxUZXh0SW5wdXRCaW5kZXI+KCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgaW9UZXh0aW5wdXQoZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFRleHRJbnB1dEJpbmRlciwgd2lkZ2V0OiBIVE1MSW5wdXRFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsVGV4dElucHV0QmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy50ZXh0SW5wdXRCaW5kZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRPdXRwdXRFdmVudCgpOiBFdmVudEVtaXR0ZXI8UGFydGlhbFRleHRJbnB1dEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLnRleHRpbnB1dEJpbmRlcjtcbiAgfVxufVxuIl19