import { Directive, ElementRef } from '@angular/core';
import { BindingImpl } from 'interacto';
import * as i0 from "@angular/core";
/**
 * Base class for Interacto's interactions Directives
 * @typeParam T - The type of the HTML element on which the directive operate
 * @typeParam B - The type of the partial binder the directive will produce
 */
export class InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef) {
        this.onDyn = onDyn;
        this.element = element;
        this.viewContainerRef = viewContainerRef;
        this.changeDetectorRef = changeDetectorRef;
        this.inputSet = false;
    }
    // tslint:disable-next-line:ban-types
    checkFnName(fn) {
        if (fn === undefined || typeof fn === "string") {
            return undefined;
        }
        return fn?.name;
    }
    callBinder(fn) {
        const fnName = this.checkFnName(fn);
        if (fnName === undefined) {
            return;
        }
        this.inputSet = true;
        // Detects changes to the component and retrieves the input values
        this.changeDetectorRef?.detectChanges();
        const binding = this.getComponent(fnName)[fnName](this.completePartialBinder(), this.getElementContent());
        if (binding instanceof BindingImpl) {
            this.binding = [binding];
        }
        else {
            if (Array.isArray(binding)) {
                this.binding = binding.filter(b => b instanceof BindingImpl).map(b => b);
            }
        }
    }
    getElementContent() {
        return this.element instanceof ElementRef ? this.element.nativeElement : this.element;
    }
    /**
     * Finds the host component. Hack...
     * @param fnName The name of the function to call for building the binding
     */
    getComponent(fnName) {
        // Finding the component. Warning: #horriblehack
        // https://github.com/angular/angular/issues/8277
        // Do not know why '8' (found by inspecting the object at run time)
        return this.viewContainerRef._hostLView[8][fnName] === undefined ?
            // When the directive is used on a template (eg ng For), have to go deeper in the object
            this.viewContainerRef._hostLView[16][8] :
            this.viewContainerRef._hostLView[8];
    }
    ngAfterContentInit() {
        if (!this.inputSet) {
            this.getOutputEvent()?.emit(this.completePartialBinder());
        }
    }
    ngOnDestroy() {
        this.binding?.forEach(b => b.uninstallBinding());
        this.getOutputEvent()?.complete();
    }
    completePartialBinder() {
        const elt = this.getElementContent();
        return (this.onDyn && elt instanceof Node ?
            this.createPartialBinder().onDynamic(elt) :
            this.createPartialBinder().on(this.element));
    }
}
InteractoBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: InteractoBinderDirective, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
InteractoBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: InteractoBinderDirective, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: InteractoBinderDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }, { type: undefined }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFzQyxTQUFTLEVBQUUsVUFBVSxFQUE0QyxNQUFNLGVBQWUsQ0FBQztBQUVwSSxPQUFPLEVBQVUsV0FBVyxFQUFzRSxNQUFNLFdBQVcsQ0FBQzs7QUFFcEg7Ozs7R0FJRztBQUVILE1BQU0sT0FBZ0Isd0JBQXdCO0lBUTVDLFlBQ1ksS0FBcUMsRUFDckMsT0FBMEIsRUFDMUIsZ0JBQWtDLEVBQ2xDLGlCQUFxQztRQUhyQyxVQUFLLEdBQUwsS0FBSyxDQUFnQztRQUNyQyxZQUFPLEdBQVAsT0FBTyxDQUFtQjtRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBb0I7UUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUlELHFDQUFxQztJQUMzQixXQUFXLENBQUMsRUFBaUM7UUFDckQsSUFBSSxFQUFFLEtBQUssU0FBUyxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUM5QyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRVMsVUFBVSxDQUFDLEVBQXlIO1FBQzVJLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFcEMsSUFBRyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLGtFQUFrRTtRQUNsRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFFeEMsTUFBTSxPQUFPLEdBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBRW5ILElBQUksT0FBTyxZQUFZLFdBQVcsRUFBRTtZQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQTJCLENBQUMsQ0FBQzthQUNwRztTQUNGO0lBQ0gsQ0FBQztJQUVTLGlCQUFpQjtRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4RixDQUFDO0lBRUQ7OztPQUdHO0lBQ08sWUFBWSxDQUFDLE1BQWM7UUFDbkMsZ0RBQWdEO1FBQ2hELGlEQUFpRDtRQUNqRCxtRUFBbUU7UUFDbkUsT0FBUSxJQUFJLENBQUMsZ0JBQXdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1lBQ3pFLHdGQUF3RjtZQUN2RixJQUFJLENBQUMsZ0JBQXdCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sa0JBQWtCO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztTQUMzRDtJQUNILENBQUM7SUFJTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVTLHFCQUFxQjtRQUM3QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBTSxDQUFDO0lBQ3RELENBQUM7O3FIQXBGbUIsd0JBQXdCO3lHQUF4Qix3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFEN0MsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5nSW1wbCwgSW50ZXJhY3Rpb25CaW5kZXIsIEludGVyYWN0aW9uQ21kQmluZGVyLCBLZXlJbnRlcmFjdGlvblVwZGF0ZUJpbmRlcn0gZnJvbSAnaW50ZXJhY3RvJztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBJbnRlcmFjdG8ncyBpbnRlcmFjdGlvbnMgRGlyZWN0aXZlc1xuICogQHR5cGVQYXJhbSBUIC0gVGhlIHR5cGUgb2YgdGhlIEhUTUwgZWxlbWVudCBvbiB3aGljaCB0aGUgZGlyZWN0aXZlIG9wZXJhdGVcbiAqIEB0eXBlUGFyYW0gQiAtIFRoZSB0eXBlIG9mIHRoZSBwYXJ0aWFsIGJpbmRlciB0aGUgZGlyZWN0aXZlIHdpbGwgcHJvZHVjZVxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8RSxcbiAgQiBleHRlbmRzIEludGVyYWN0aW9uQmluZGVyPGFueSwgYW55PiB8IEtleUludGVyYWN0aW9uVXBkYXRlQmluZGVyPGFueSwgYW55PiB8IEludGVyYWN0aW9uQ21kQmluZGVyPGFueSwgYW55LCBhbnk+PlxuICBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJvdGVjdGVkIGlucHV0U2V0OiBib29sZWFuO1xuXG4gIHByb3RlY3RlZCBiaW5kaW5nOiBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHVuZGVmaW5lZDtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUgfCB1bmRlZmluZWQsXG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY8RT4gfCBFLFxuICAgIHByb3RlY3RlZCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvclJlZj86IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5pbnB1dFNldCA9IGZhbHNlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogQjtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gIHByb3RlY3RlZCBjaGVja0ZuTmFtZShmbjogRnVuY3Rpb24gfCB1bmRlZmluZWQgfCBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChmbiA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBmbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGZuPy5uYW1lO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGxCaW5kZXIoZm46ICgocGFydGlhbEJpbmRlcjogQiwgd2lkZ2V0OiBFKSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGZuTmFtZSA9IHRoaXMuY2hlY2tGbk5hbWUoZm4pO1xuXG4gICAgaWYoZm5OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmlucHV0U2V0ID0gdHJ1ZTtcbiAgICAvLyBEZXRlY3RzIGNoYW5nZXMgdG8gdGhlIGNvbXBvbmVudCBhbmQgcmV0cmlldmVzIHRoZSBpbnB1dCB2YWx1ZXNcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmPy5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBjb25zdCBiaW5kaW5nOiB1bmtub3duID0gdGhpcy5nZXRDb21wb25lbnQoZm5OYW1lKVtmbk5hbWVdKHRoaXMuY29tcGxldGVQYXJ0aWFsQmluZGVyKCksIHRoaXMuZ2V0RWxlbWVudENvbnRlbnQoKSk7XG5cbiAgICBpZiAoYmluZGluZyBpbnN0YW5jZW9mIEJpbmRpbmdJbXBsKSB7XG4gICAgICB0aGlzLmJpbmRpbmcgPSBbYmluZGluZ107XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmcpKSB7XG4gICAgICAgIHRoaXMuYmluZGluZyA9IGJpbmRpbmcuZmlsdGVyKGIgPT4gYiBpbnN0YW5jZW9mIEJpbmRpbmdJbXBsKS5tYXAoYiA9PiBiIGFzIEJpbmRpbmc8YW55LCBhbnksIGFueT4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRFbGVtZW50Q29udGVudCgpOiBFIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudFJlZiA/IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50IDogdGhpcy5lbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBob3N0IGNvbXBvbmVudC4gSGFjay4uLlxuICAgKiBAcGFyYW0gZm5OYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBidWlsZGluZyB0aGUgYmluZGluZ1xuICAgKi9cbiAgcHJvdGVjdGVkIGdldENvbXBvbmVudChmbk5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgLy8gRmluZGluZyB0aGUgY29tcG9uZW50LiBXYXJuaW5nOiAjaG9ycmlibGVoYWNrXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvODI3N1xuICAgIC8vIERvIG5vdCBrbm93IHdoeSAnOCcgKGZvdW5kIGJ5IGluc3BlY3RpbmcgdGhlIG9iamVjdCBhdCBydW4gdGltZSlcbiAgICByZXR1cm4gKHRoaXMudmlld0NvbnRhaW5lclJlZiBhcyBhbnkpLl9ob3N0TFZpZXdbOF1bZm5OYW1lXSA9PT0gdW5kZWZpbmVkID9cbiAgICAgIC8vIFdoZW4gdGhlIGRpcmVjdGl2ZSBpcyB1c2VkIG9uIGEgdGVtcGxhdGUgKGVnIG5nIEZvciksIGhhdmUgdG8gZ28gZGVlcGVyIGluIHRoZSBvYmplY3RcbiAgICAgICh0aGlzLnZpZXdDb250YWluZXJSZWYgYXMgYW55KS5faG9zdExWaWV3WzE2XVs4XSA6XG4gICAgICAodGhpcy52aWV3Q29udGFpbmVyUmVmIGFzIGFueSkuX2hvc3RMVmlld1s4XTtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlucHV0U2V0KSB7XG4gICAgICB0aGlzLmdldE91dHB1dEV2ZW50KCk/LmVtaXQodGhpcy5jb21wbGV0ZVBhcnRpYWxCaW5kZXIoKSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxCPiB8IHVuZGVmaW5lZDtcblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5iaW5kaW5nPy5mb3JFYWNoKGIgPT4gYi51bmluc3RhbGxCaW5kaW5nKCkpO1xuICAgIHRoaXMuZ2V0T3V0cHV0RXZlbnQoKT8uY29tcGxldGUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wbGV0ZVBhcnRpYWxCaW5kZXIoKTogQiB7XG4gICAgY29uc3QgZWx0ID0gdGhpcy5nZXRFbGVtZW50Q29udGVudCgpO1xuICAgIHJldHVybiAodGhpcy5vbkR5biAmJiBlbHQgaW5zdGFuY2VvZiBOb2RlID9cbiAgICAgIHRoaXMuY3JlYXRlUGFydGlhbEJpbmRlcigpLm9uRHluYW1pYyhlbHQpIDpcbiAgICAgIHRoaXMuY3JlYXRlUGFydGlhbEJpbmRlcigpLm9uKHRoaXMuZWxlbWVudCkpIGFzIEI7XG4gIH1cbn1cbiJdfQ==