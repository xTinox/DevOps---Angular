import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class KeyTypeBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.keyTypeBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the key typing interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioKeyType(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.keyTypeBinder();
    }
    getOutputEvent() {
        return this.keyTypeBinder;
    }
}
KeyTypeBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: KeyTypeBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
KeyTypeBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: KeyTypeBinderDirective, selector: "[ioKeyType]", inputs: { ioKeyType: "ioKeyType" }, outputs: { keyTypeBinder: "keyTypeBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: KeyTypeBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioKeyType]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { keyTypeBinder: [{
                type: Output
            }], ioKeyType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXR5cGUtYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9rZXktdHlwZS1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQWMsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFFbkgsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFNdEUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHdCQUF1RDtJQUlqRyxZQUFnQyxLQUF5QixFQUM3QyxPQUFnQyxFQUNoQyxnQkFBa0MsRUFDMUIsUUFBbUM7UUFDckQsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUR0QixhQUFRLEdBQVIsUUFBUSxDQUEyQjtRQUVyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO0lBQzVELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUNJLFNBQVMsQ0FBQyxFQUFrSjtRQUM5SixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFUyxjQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOzttSEEzQlUsc0JBQXNCO3VHQUF0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFIbEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7OzBCQUtjLFFBQVE7OzBCQUFJLElBQUk7MkhBRlosYUFBYTtzQkFEN0IsTUFBTTtnQkFnQkgsU0FBUztzQkFEWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbEtleUJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9LZXlUeXBlXSdcbn0pXG5leHBvcnQgY2xhc3MgS2V5VHlwZUJpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MRWxlbWVudCwgUGFydGlhbEtleUJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSBrZXlUeXBlQmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbEtleUJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKG9uRHluLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmKTtcbiAgICB0aGlzLmtleVR5cGVCaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxLZXlCaW5kZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIGtleSB0eXBpbmcgaW50ZXJhY3Rpb24uXG4gICAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gY29uZmlndXJlIHRoZSBiaW5kaW5nLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlvS2V5VHlwZShmbjogKChwYXJ0aWFsQmluZGVyOiBQYXJ0aWFsS2V5QmluZGVyLCB3aWRnZXQ6IEhUTUxFbGVtZW50KSA9PiBCaW5kaW5nPGFueSwgYW55LCBhbnk+IHwgQXJyYXk8QmluZGluZzxhbnksIGFueSwgYW55Pj4gfCB2b2lkKSB8IHVuZGVmaW5lZCB8IHN0cmluZykgIHtcbiAgICB0aGlzLmNhbGxCaW5kZXIoZm4pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbEtleUJpbmRlciB7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ3Mua2V5VHlwZUJpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsS2V5QmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMua2V5VHlwZUJpbmRlcjtcbiAgfVxufVxuIl19