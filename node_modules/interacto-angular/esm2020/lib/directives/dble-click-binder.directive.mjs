import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class DoubleClickBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.dbleclickBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the double-click interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioDoubleClick(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.dbleClickBinder();
    }
    getOutputEvent() {
        return this.dbleclickBinder;
    }
}
DoubleClickBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DoubleClickBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
DoubleClickBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: DoubleClickBinderDirective, selector: "[ioDoubleClick]", inputs: { ioDoubleClick: "ioDoubleClick" }, outputs: { dbleclickBinder: "dbleclickBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: DoubleClickBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioDoubleClick]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { dbleclickBinder: [{
                type: Output
            }], ioDoubleClick: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJsZS1jbGljay1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2RibGUtY2xpY2stYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBR25ILE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBS3RFLE1BQU0sT0FBTywwQkFBMkIsU0FBUSx3QkFBK0Q7SUFJN0csWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQzFCLFFBQW1DO1FBQ3JELEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFEdEIsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFFckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLFlBQVksRUFBNEIsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFDSSxhQUFhLENBQUMsRUFBMEo7UUFDMUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQzs7dUhBM0JVLDBCQUEwQjsyR0FBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBSHRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7OzBCQUtjLFFBQVE7OzBCQUFJLElBQUk7MkhBRlosZUFBZTtzQkFEL0IsTUFBTTtnQkFnQkgsYUFBYTtzQkFEaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIFBhcnRpYWxVcGRhdGVQb2ludEJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW9Eb3VibGVDbGlja10nXG59KVxuZXhwb3J0IGNsYXNzIERvdWJsZUNsaWNrQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgZGJsZWNsaWNrQmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbFVwZGF0ZVBvaW50QmluZGVyPjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASG9zdCgpIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMuZGJsZWNsaWNrQmluZGVyID0gbmV3IEV2ZW50RW1pdHRlcjxQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIGRvdWJsZS1jbGljayBpbnRlcmFjdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBjb25maWd1cmUgdGhlIGJpbmRpbmcuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaW9Eb3VibGVDbGljayhmbjogKChwYXJ0aWFsQmluZGVyOiBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXIsIHdpZGdldDogSFRNTEVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSAge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLmRibGVDbGlja0JpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy5kYmxlY2xpY2tCaW5kZXI7XG4gIH1cbn1cbiJdfQ==