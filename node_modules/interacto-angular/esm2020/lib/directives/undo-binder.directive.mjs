import { Directive, Input } from '@angular/core';
import { Undo } from 'interacto';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "interacto";
export class UndoBinderDirective extends InteractoBinderDirective {
    constructor(element, viewContainerRef, bindings) {
        super(undefined, element, viewContainerRef);
        this.bindings = bindings;
        this.undoObs = bindings.undoHistory
            .undosObservable()
            .subscribe(_ => {
            this.updateUndo();
        });
    }
    set ioUndo(fn) {
        this.callBinder(fn);
    }
    updateUndo() {
        const elt = this.getElementContent();
        elt.disabled = this.bindings.undoHistory.getLastUndo() === undefined;
        elt.title = this.bindings.undoHistory.getLastOrEmptyUndoMessage();
    }
    ngAfterContentInit() {
        this.updateUndo();
        if (!this.inputSet) {
            const b = this.createPartialBinder()
                .catch(err => {
                console.log(err);
            })
                .bind();
            this.binding = [b];
        }
    }
    createPartialBinder() {
        return this.bindings
            .buttonBinder()
            .on(this.element)
            .toProduce(() => new Undo(this.bindings.undoHistory));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.undoObs.unsubscribe();
    }
    getOutputEvent() {
        return undefined;
    }
}
UndoBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: UndoBinderDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i1.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
UndoBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: UndoBinderDirective, selector: "button:ioUndo,button:[ioUndo]", inputs: { ioUndo: "ioUndo" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: UndoBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button:ioUndo,button:[ioUndo]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i1.Bindings }]; }, propDecorators: { ioUndo: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5kby1iaW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaW50ZXJhY3RvLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL3VuZG8tYmluZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBNEIsS0FBSyxFQUE4QixNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQXVELElBQUksRUFBOEIsTUFBTSxXQUFXLENBQUM7QUFFbEgsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sOEJBQThCLENBQUM7OztBQU90RSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsd0JBQW9FO0lBSzNHLFlBQ0UsT0FBc0MsRUFDdEMsZ0JBQWtDLEVBQzFCLFFBQW1DO1FBQzNDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFEcEMsYUFBUSxHQUFSLFFBQVEsQ0FBMkI7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsV0FBVzthQUNoQyxlQUFlLEVBQUU7YUFDakIsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQ1csTUFBTSxDQUFDLEVBQXlKO1FBQ3pLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUdPLFVBQVU7UUFDaEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUM7UUFDckUsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ3BFLENBQUM7SUFFZSxrQkFBa0I7UUFDaEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtpQkFDakMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDO2lCQUNELElBQUksRUFBRSxDQUFDO1lBRVYsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRO2FBQ2pCLFlBQVksRUFBRTthQUNkLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ2hCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVlLFdBQVc7UUFDekIsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Z0hBekRVLG1CQUFtQjtvR0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBSC9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtpQkFDMUM7dUpBbUJZLE1BQU07c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyQ29udGVudEluaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIEludGVyYWN0aW9uLCBJbnRlcmFjdGlvbkNtZEJpbmRlciwgVW5kbywgVW5kb0hpc3RvcnlCYXNlLCBXaWRnZXREYXRhfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuXG5leHBvcnQgdHlwZSBQYXJ0aWFsVW5kb0J1dHRvbkJpbmRlciA9IEludGVyYWN0aW9uQ21kQmluZGVyPFVuZG8sIEludGVyYWN0aW9uPFdpZGdldERhdGE8SFRNTEJ1dHRvbkVsZW1lbnQ+PiwgV2lkZ2V0RGF0YTxIVE1MQnV0dG9uRWxlbWVudD4+O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdidXR0b246aW9VbmRvLGJ1dHRvbjpbaW9VbmRvXSdcbn0pXG5leHBvcnQgY2xhc3MgVW5kb0JpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MQnV0dG9uRWxlbWVudCwgUGFydGlhbFVuZG9CdXR0b25CaW5kZXI+XG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IHVuZG9PYnM6IFN1YnNjcmlwdGlvbjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudD4sXG4gICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIodW5kZWZpbmVkLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmKTtcbiAgICB0aGlzLnVuZG9PYnMgPSBiaW5kaW5ncy51bmRvSGlzdG9yeVxuICAgICAgLnVuZG9zT2JzZXJ2YWJsZSgpXG4gICAgICAuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVVuZG8oKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBpb1VuZG8oZm46ICgocGFydGlhbEJpbmRlcjogUGFydGlhbFVuZG9CdXR0b25CaW5kZXIsIHdpZGdldDogSFRNTEVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSB1cGRhdGVVbmRvKCk6IHZvaWQge1xuICAgIGNvbnN0IGVsdCA9IHRoaXMuZ2V0RWxlbWVudENvbnRlbnQoKTtcbiAgICBlbHQuZGlzYWJsZWQgPSB0aGlzLmJpbmRpbmdzLnVuZG9IaXN0b3J5LmdldExhc3RVbmRvKCkgPT09IHVuZGVmaW5lZDtcbiAgICBlbHQudGl0bGUgPSB0aGlzLmJpbmRpbmdzLnVuZG9IaXN0b3J5LmdldExhc3RPckVtcHR5VW5kb01lc3NhZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVVbmRvKCk7XG5cbiAgICBpZiAoIXRoaXMuaW5wdXRTZXQpIHtcbiAgICAgIGNvbnN0IGIgPSB0aGlzLmNyZWF0ZVBhcnRpYWxCaW5kZXIoKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KVxuICAgICAgICAuYmluZCgpO1xuXG4gICAgICB0aGlzLmJpbmRpbmcgPSBbYl07XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVBhcnRpYWxCaW5kZXIoKTogUGFydGlhbFVuZG9CdXR0b25CaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzXG4gICAgICAuYnV0dG9uQmluZGVyKClcbiAgICAgIC5vbih0aGlzLmVsZW1lbnQpXG4gICAgICAudG9Qcm9kdWNlKCgpID0+IG5ldyBVbmRvKHRoaXMuYmluZGluZ3MudW5kb0hpc3RvcnkpKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgIHRoaXMudW5kb09icy51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsVW5kb0J1dHRvbkJpbmRlcj4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==