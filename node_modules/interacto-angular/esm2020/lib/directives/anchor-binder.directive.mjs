import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class AnchorBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.aBinder = new EventEmitter();
    }
    set ioAnchor(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.hyperlinkBinder();
    }
    getOutputEvent() {
        return this.aBinder;
    }
}
AnchorBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: AnchorBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
AnchorBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: AnchorBinderDirective, selector: "a:[ioAnchor],[ioAnchor] [ioOnDynamic]", inputs: { ioAnchor: "ioAnchor" }, outputs: { aBinder: "aBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: AnchorBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'a:[ioAnchor],[ioAnchor] [ioOnDynamic]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { aBinder: [{
                type: Output
            }], ioAnchor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5jaG9yLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvYW5jaG9yLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVuSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsd0JBQWdFO0lBSXpHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQXNDLEVBQ3RDLGdCQUFrQyxFQUMxQixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7SUFDekQsQ0FBQztJQUVELElBQ0ksUUFBUSxDQUFDLEVBQTJKO1FBQ3RLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7O2tIQXZCVSxxQkFBcUI7c0dBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQUhqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1Q0FBdUM7aUJBQ2xEOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJIQUZaLE9BQU87c0JBRHZCLE1BQU07Z0JBWUgsUUFBUTtzQkFEWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbEFuY2hvckJpbmRlciwgVW5kb0hpc3RvcnlCYXNlfSBmcm9tICdpbnRlcmFjdG8nO1xuaW1wb3J0IHtJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmV9IGZyb20gJy4vaW50ZXJhY3RvLWJpbmRlci1kaXJlY3RpdmUnO1xuaW1wb3J0IHtPbkR5bmFtaWNEaXJlY3RpdmV9IGZyb20gJy4vb24tZHluYW1pYy5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdhOltpb0FuY2hvcl0sW2lvQW5jaG9yXSBbaW9PbkR5bmFtaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBBbmNob3JCaW5kZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcmFjdG9CaW5kZXJEaXJlY3RpdmU8SFRNTEFuY2hvckVsZW1lbnQsIFBhcnRpYWxBbmNob3JCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgYUJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxBbmNob3JCaW5kZXI+O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBIb3N0KCkgb25EeW46IE9uRHluYW1pY0RpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MQW5jaG9yRWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgYmluZGluZ3M6IEJpbmRpbmdzPFVuZG9IaXN0b3J5QmFzZT4pIHtcbiAgICBzdXBlcihvbkR5biwgZWxlbWVudCwgdmlld0NvbnRhaW5lclJlZik7XG4gICAgdGhpcy5hQmluZGVyID0gbmV3IEV2ZW50RW1pdHRlcjxQYXJ0aWFsQW5jaG9yQmluZGVyPigpO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGlvQW5jaG9yKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxBbmNob3JCaW5kZXIsIHdpZGdldDogSFRNTEFuY2hvckVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5jYWxsQmluZGVyKGZuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVQYXJ0aWFsQmluZGVyKCk6IFBhcnRpYWxBbmNob3JCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLmh5cGVybGlua0JpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsQW5jaG9yQmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuYUJpbmRlcjtcbiAgfVxufVxuIl19