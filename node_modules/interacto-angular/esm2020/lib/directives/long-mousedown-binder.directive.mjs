import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class LongMousedownBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        /**
         * The duration of the pressure to end the user interaction.
         * If this duration is not reached, the interaction is cancelled.
         */
        this.duration = 1000;
        this.longMousedownBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the long press interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioLongMousedown(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.longMouseDownBinder(this.duration);
    }
    getOutputEvent() {
        return this.longMousedownBinder;
    }
}
LongMousedownBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: LongMousedownBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
LongMousedownBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: LongMousedownBinderDirective, selector: "[ioLongMousedown]", inputs: { duration: "duration", ioLongMousedown: "ioLongMousedown" }, outputs: { longMousedownBinder: "longMousedownBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: LongMousedownBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioLongMousedown]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { longMousedownBinder: [{
                type: Output
            }], duration: [{
                type: Input
            }], ioLongMousedown: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1tb3VzZWRvd24tYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9sb25nLW1vdXNlZG93bi1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRXRJLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBTXRFLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSx3QkFBK0Q7SUFJL0csWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQ2xDLGlCQUFvQyxFQUM1QixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRHpDLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBS3ZEOzs7V0FHRztRQUVILGFBQVEsR0FBRyxJQUFJLENBQUM7UUFSZCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7SUFDMUUsQ0FBQztJQVNEOzs7T0FHRztJQUNILElBQ0ksZUFBZSxDQUFDLEVBQTBKO1FBQzVLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFUyxjQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2xDLENBQUM7O3lIQW5DVSw0QkFBNEI7NkdBQTVCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUh4QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJKQUZaLG1CQUFtQjtzQkFEbkMsTUFBTTtnQkFpQlAsUUFBUTtzQkFEUCxLQUFLO2dCQVFGLGVBQWU7c0JBRGxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCaW5kaW5nLCBCaW5kaW5ncywgUGFydGlhbFVwZGF0ZVBvaW50QmluZGVyLCBVbmRvSGlzdG9yeUJhc2V9IGZyb20gJ2ludGVyYWN0byc7XG5pbXBvcnQge0ludGVyYWN0b0JpbmRlckRpcmVjdGl2ZX0gZnJvbSAnLi9pbnRlcmFjdG8tYmluZGVyLWRpcmVjdGl2ZSc7XG5pbXBvcnQge09uRHluYW1pY0RpcmVjdGl2ZX0gZnJvbSAnLi9vbi1keW5hbWljLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpb0xvbmdNb3VzZWRvd25dJ1xufSlcbmV4cG9ydCBjbGFzcyBMb25nTW91c2Vkb3duQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgbG9uZ01vdXNlZG93bkJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxVcGRhdGVQb2ludEJpbmRlcj47XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEhvc3QoKSBvbkR5bjogT25EeW5hbWljRGlyZWN0aXZlLFxuICAgICAgICAgICAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYsIGNoYW5nZURldGVjdG9yUmVmKTtcbiAgICB0aGlzLmxvbmdNb3VzZWRvd25CaW5kZXIgPSBuZXcgRXZlbnRFbWl0dGVyPFBhcnRpYWxVcGRhdGVQb2ludEJpbmRlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHByZXNzdXJlIHRvIGVuZCB0aGUgdXNlciBpbnRlcmFjdGlvbi5cbiAgICogSWYgdGhpcyBkdXJhdGlvbiBpcyBub3QgcmVhY2hlZCwgdGhlIGludGVyYWN0aW9uIGlzIGNhbmNlbGxlZC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGR1cmF0aW9uID0gMTAwMDtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIGxvbmcgcHJlc3MgaW50ZXJhY3Rpb24uXG4gICAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gY29uZmlndXJlIHRoZSBiaW5kaW5nLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlvTG9uZ01vdXNlZG93bihmbjogKChwYXJ0aWFsQmluZGVyOiBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXIsIHdpZGdldDogSFRNTEVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSAge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsVXBkYXRlUG9pbnRCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLmxvbmdNb3VzZURvd25CaW5kZXIodGhpcy5kdXJhdGlvbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0T3V0cHV0RXZlbnQoKTogRXZlbnRFbWl0dGVyPFBhcnRpYWxVcGRhdGVQb2ludEJpbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLmxvbmdNb3VzZWRvd25CaW5kZXI7XG4gIH1cbn1cbiJdfQ==