import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class MousemoveBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, bindings) {
        super(onDyn, element, viewContainerRef);
        this.bindings = bindings;
        this.mousemoveBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the mouse press interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioMousemove(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.mouseMoveBinder();
    }
    getOutputEvent() {
        return this.mousemoveBinder;
    }
}
MousemoveBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MousemoveBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
MousemoveBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: MousemoveBinderDirective, selector: "[ioMousemove]", inputs: { ioMousemove: "ioMousemove" }, outputs: { mousemoveBinder: "mousemoveBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: MousemoveBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioMousemove]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i2.Bindings }]; }, propDecorators: { mousemoveBinder: [{
                type: Output
            }], ioMousemove: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2Vtb3ZlLWJpbmRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pbnRlcmFjdG8tYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvbW91c2Vtb3ZlLWJpbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBYyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVuSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU10RSxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsd0JBQXlEO0lBSXJHLFlBQWdDLEtBQXlCLEVBQzdDLE9BQWdDLEVBQ2hDLGdCQUFrQyxFQUMxQixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRHRCLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBRXJELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7SUFDaEUsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQ0ksV0FBVyxDQUFDLEVBQW9KO1FBQ2xLLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVTLG1CQUFtQjtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVTLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7O3FIQTNCVSx3QkFBd0I7eUdBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQUhwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs7MEJBS2MsUUFBUTs7MEJBQUksSUFBSTsySEFGWixlQUFlO3NCQUQvQixNQUFNO2dCQWdCSCxXQUFXO3NCQURkLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0JpbmRpbmcsIEJpbmRpbmdzLCBQYXJ0aWFsUG9pbnRCaW5kZXIsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvTW91c2Vtb3ZlXSdcbn0pXG5leHBvcnQgY2xhc3MgTW91c2Vtb3ZlQmluZGVyRGlyZWN0aXZlIGV4dGVuZHMgSW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlPEhUTUxFbGVtZW50LCBQYXJ0aWFsUG9pbnRCaW5kZXI+IHtcbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgcmVhZG9ubHkgbW91c2Vtb3ZlQmluZGVyOiBFdmVudEVtaXR0ZXI8UGFydGlhbFBvaW50QmluZGVyPjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASG9zdCgpIG9uRHluOiBPbkR5bmFtaWNEaXJlY3RpdmUsXG4gICAgICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGJpbmRpbmdzOiBCaW5kaW5nczxVbmRvSGlzdG9yeUJhc2U+KSB7XG4gICAgc3VwZXIob25EeW4sIGVsZW1lbnQsIHZpZXdDb250YWluZXJSZWYpO1xuICAgIHRoaXMubW91c2Vtb3ZlQmluZGVyID0gbmV3IEV2ZW50RW1pdHRlcjxQYXJ0aWFsUG9pbnRCaW5kZXI+KCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjcmVhdGlvbiBvZiBhIGJpbmRpbmcgdXNpbmcgdGhlIG1vdXNlIHByZXNzIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb01vdXNlbW92ZShmbjogKChwYXJ0aWFsQmluZGVyOiBQYXJ0aWFsUG9pbnRCaW5kZXIsIHdpZGdldDogSFRNTEVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSAge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsUG9pbnRCaW5kZXIge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLm1vdXNlTW92ZUJpbmRlcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsUG9pbnRCaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy5tb3VzZW1vdmVCaW5kZXI7XG4gIH1cbn1cbiJdfQ==