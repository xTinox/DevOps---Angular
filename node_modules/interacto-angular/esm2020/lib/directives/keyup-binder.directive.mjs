import { Directive, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import { InteractoBinderDirective } from './interacto-binder-directive';
import * as i0 from "@angular/core";
import * as i1 from "./on-dynamic.directive";
import * as i2 from "interacto";
export class KeyupBinderDirective extends InteractoBinderDirective {
    constructor(onDyn, element, viewContainerRef, changeDetectorRef, bindings) {
        super(onDyn, element, viewContainerRef, changeDetectorRef);
        this.bindings = bindings;
        this.modifierAccepted = true;
        this.keyupBinder = new EventEmitter();
    }
    /**
     * Starts the creation of a binding using the key pressure interaction.
     * @param fn - The function of the component that will be called to configure the binding.
     */
    set ioKeyup(fn) {
        this.callBinder(fn);
    }
    createPartialBinder() {
        return this.bindings.keyUpBinder(this.modifierAccepted);
    }
    getOutputEvent() {
        return this.keyupBinder;
    }
}
KeyupBinderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: KeyupBinderDirective, deps: [{ token: i1.OnDynamicDirective, host: true, optional: true }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.ChangeDetectorRef }, { token: i2.Bindings }], target: i0.ɵɵFactoryTarget.Directive });
KeyupBinderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: KeyupBinderDirective, selector: "[ioKeyup]", inputs: { modifierAccepted: "modifierAccepted", ioKeyup: "ioKeyup" }, outputs: { keyupBinder: "keyupBinder" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: KeyupBinderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ioKeyup]'
                }]
        }], ctorParameters: function () { return [{ type: i1.OnDynamicDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.ChangeDetectorRef }, { type: i2.Bindings }]; }, propDecorators: { keyupBinder: [{
                type: Output
            }], modifierAccepted: [{
                type: Input
            }], ioKeyup: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5dXAtYmluZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyYWN0by1hbmd1bGFyL3NyYy9saWIvZGlyZWN0aXZlcy9rZXl1cC1iaW5kZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFjLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBR3RJLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBS3RFLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx3QkFBdUQ7SUFJL0YsWUFBZ0MsS0FBeUIsRUFDN0MsT0FBZ0MsRUFDaEMsZ0JBQWtDLEVBQ2xDLGlCQUFvQyxFQUM1QixRQUFtQztRQUNyRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRHpDLGFBQVEsR0FBUixRQUFRLENBQTJCO1FBTXZELHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUp0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO0lBQzFELENBQUM7SUFLRDs7O09BR0c7SUFDSCxJQUNJLE9BQU8sQ0FBQyxFQUFrSjtRQUM1SixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxtQkFBbUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRVMsY0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7aUhBL0JVLG9CQUFvQjtxR0FBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBSGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCOzswQkFLYyxRQUFROzswQkFBSSxJQUFJOzJKQUZaLFdBQVc7c0JBRDNCLE1BQU07Z0JBYVAsZ0JBQWdCO3NCQURmLEtBQUs7Z0JBUUYsT0FBTztzQkFEVixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3QsIElucHV0LCBPcHRpb25hbCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmluZGluZywgQmluZGluZ3MsIFBhcnRpYWxLZXlCaW5kZXIsIFVuZG9IaXN0b3J5QmFzZX0gZnJvbSAnaW50ZXJhY3RvJztcbmltcG9ydCB7T25EeW5hbWljRGlyZWN0aXZlfSBmcm9tICcuL29uLWR5bmFtaWMuZGlyZWN0aXZlJztcbmltcG9ydCB7SW50ZXJhY3RvQmluZGVyRGlyZWN0aXZlfSBmcm9tICcuL2ludGVyYWN0by1iaW5kZXItZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2lvS2V5dXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBLZXl1cEJpbmRlckRpcmVjdGl2ZSBleHRlbmRzIEludGVyYWN0b0JpbmRlckRpcmVjdGl2ZTxIVE1MRWxlbWVudCwgUGFydGlhbEtleUJpbmRlcj4ge1xuICBAT3V0cHV0KClcbiAgcHJpdmF0ZSByZWFkb25seSBrZXl1cEJpbmRlcjogRXZlbnRFbWl0dGVyPFBhcnRpYWxLZXlCaW5kZXI+O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBIb3N0KCkgb25EeW46IE9uRHluYW1pY0RpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBiaW5kaW5nczogQmluZGluZ3M8VW5kb0hpc3RvcnlCYXNlPikge1xuICAgIHN1cGVyKG9uRHluLCBlbGVtZW50LCB2aWV3Q29udGFpbmVyUmVmLCBjaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgdGhpcy5rZXl1cEJpbmRlciA9IG5ldyBFdmVudEVtaXR0ZXI8UGFydGlhbEtleUJpbmRlcj4oKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIG1vZGlmaWVyQWNjZXB0ZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGNyZWF0aW9uIG9mIGEgYmluZGluZyB1c2luZyB0aGUga2V5IHByZXNzdXJlIGludGVyYWN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNvbmZpZ3VyZSB0aGUgYmluZGluZy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBpb0tleXVwKGZuOiAoKHBhcnRpYWxCaW5kZXI6IFBhcnRpYWxLZXlCaW5kZXIsIHdpZGdldDogSFRNTEVsZW1lbnQpID0+IEJpbmRpbmc8YW55LCBhbnksIGFueT4gfCBBcnJheTxCaW5kaW5nPGFueSwgYW55LCBhbnk+PiB8IHZvaWQpIHwgdW5kZWZpbmVkIHwgc3RyaW5nKSAge1xuICAgIHRoaXMuY2FsbEJpbmRlcihmbik7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUGFydGlhbEJpbmRlcigpOiBQYXJ0aWFsS2V5QmluZGVyIHtcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5rZXlVcEJpbmRlcih0aGlzLm1vZGlmaWVyQWNjZXB0ZWQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE91dHB1dEV2ZW50KCk6IEV2ZW50RW1pdHRlcjxQYXJ0aWFsS2V5QmluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMua2V5dXBCaW5kZXI7XG4gIH1cbn1cbiJdfQ==