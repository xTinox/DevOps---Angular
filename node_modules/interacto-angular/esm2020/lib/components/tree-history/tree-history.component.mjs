import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "interacto";
import * as i2 from "@angular/common";
import * as i3 from "../../directives/click-binder.directive";
import * as i4 from "../../directives/undo-binder.directive";
import * as i5 from "../../directives/redo-binder.directive";
/**
 * The Angular component for display a tree-based undo/redo history
 */
export class TreeHistoryComponent {
    constructor(history, changeDetect) {
        this.history = history;
        this.changeDetect = changeDetect;
        this.svgViewportWidth = 50;
        this.svgViewportHeight = 50;
        this.svgIconSize = 50;
        this.rootRenderer = undefined;
        this.widthcss = "";
        this.cache = {};
        // Only updating the view on history changes
        this.subscriptionUndos = history.undosObservable().subscribe(() => {
            changeDetect.detectChanges();
        });
        this.subscriptionRedos = history.redosObservable().subscribe(() => {
            changeDetect.detectChanges();
        });
    }
    ngAfterViewInit() {
        // Preventing the input attributes to update the view
        this.changeDetect.detach();
    }
    ngOnDestroy() {
        this.subscriptionUndos.unsubscribe();
        this.subscriptionRedos.unsubscribe();
    }
    depth(undoableNode) {
        let depth = -1;
        let n = undoableNode;
        while (n !== undefined) {
            depth++;
            n = n.parent;
        }
        return Math.max(0, depth);
    }
    createHtmlTag(snapshot, div, svg) {
        div.querySelectorAll('div')[0]?.remove();
        const size = `${this.svgIconSize}px`;
        const divpic = document.createElement("div");
        divpic.appendChild(snapshot);
        divpic.style.width = size;
        divpic.style.height = size;
        if (svg) {
            snapshot.setAttribute("viewBox", `0 0 ${this.svgViewportWidth} ${this.svgViewportHeight}`);
        }
        snapshot.setAttribute("width", size);
        snapshot.setAttribute("height", size);
        div.appendChild(divpic);
    }
    undoButtonSnapshot_(snapshot, txt, div) {
        if (typeof snapshot === 'string') {
            return `${txt}: ${snapshot}`;
        }
        if (snapshot instanceof SVGElement) {
            this.createHtmlTag(snapshot, div, true);
            return txt;
        }
        if (snapshot instanceof HTMLElement) {
            this.createHtmlTag(snapshot, div, false);
            return undefined;
        }
        return txt;
    }
    undoButtonSnapshot(node, div) {
        if (node === undefined) {
            if (this.cacheRoot === undefined) {
                this.cacheRoot = this.rootRenderer;
            }
        }
        else {
            if (this.cache[node.id] === undefined) {
                this.cache[node.id] = node.visualSnapshot;
            }
        }
        const snapshot = node === undefined ? this.cacheRoot : this.cache[node.id];
        const txt = node === undefined ? "Root" : node.undoable.getUndoName();
        if (snapshot === undefined) {
            return txt;
        }
        if (snapshot instanceof Promise) {
            void snapshot.then((res) => {
                if (node !== undefined) {
                    this.cache[node.id] = res;
                }
                else {
                    this.cacheRoot = res;
                }
                return this.undoButtonSnapshot_(res, txt, div);
            });
            return txt;
        }
        if (node?.id === this.history.currentNode.id) {
            div.scrollIntoView();
        }
        return this.undoButtonSnapshot_(snapshot, txt, div);
    }
    clickBinders(binder, position) {
        return [
            binder
                .toProduceAnon(() => {
                this.history.goTo(position);
            })
                .when(i => i.button === 0)
                .bind(),
            binder
                .toProduceAnon(() => {
                this.history.delete(position);
            })
                .when(i => !this.history.keepPath && i.button === 2)
                .ifHadEffects(() => {
                this.changeDetect.detectChanges();
            })
                .bind()
        ];
    }
    getTop(position) {
        return this.depth(this.history.undoableNodes[position.key]) * (this.svgIconSize + 10) + 10;
    }
    getLeft(position) {
        return position.value * (this.svgIconSize + 10) + 10;
    }
}
TreeHistoryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TreeHistoryComponent, deps: [{ token: i1.TreeUndoHistory }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TreeHistoryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.4", type: TreeHistoryComponent, selector: "io-tree-history", inputs: { width: "width", svgViewportWidth: "svgViewportWidth", svgViewportHeight: "svgViewportHeight", svgIconSize: "svgIconSize", rootRenderer: "rootRenderer" }, host: { properties: { "style.width": "this.widthcss" } }, ngImport: i0, template: "<div class=\"header\">\n  <h2>HISTORY</h2>\n  <button ioUndo class=\"button-undo-redo\">undo</button>\n  <button ioRedo class=\"button-undo-redo\">redo</button>\n</div>\n\n<div class=\"tree\" oncontextmenu=\"return false;\">\n  <div #d class=\"tree-node-history\" *ngFor=\"let position of history.getPositions() | keyvalue\"\n       [ngStyle]=\"{left: getLeft(position) + 'px', top: getTop(position) + 'px'}\"\n       [ngClass]=\"history.currentNode.id === position.key ? 'current-node' : ''\"\n       [ioClick] (clickBinder)=\"clickBinders($event, position.key)\">\n    {{undoButtonSnapshot(history.undoableNodes[position.key], d)}}\n  </div>\n</div>\n", styles: [".header{background-color:#000;min-height:75px;border-bottom-style:solid}.header h2{font-size:25px;text-align:center;padding-top:25px;padding-bottom:25px;margin:0;color:#fff}.tree-node-history{position:absolute;padding:0;border-style:solid;color:#000;background-color:#fff;border-width:thin;-webkit-user-select:none;user-select:none}.button-undo-redo{width:50%;min-height:40px;border-right-style:solid;border-left-style:solid;color:#000;background-color:#fff;border-width:thin;font-size:20px}.header button:disabled{width:50%;border-right-style:solid;border-left-style:solid;color:#000;background-color:#d3d3d3;border-width:thin;font-size:20px}.current-node{background-color:#708090}.tree{overflow:auto;width:inherit;height:inherit;position:fixed}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i3.ClickBinderDirective, selector: "[ioClick]", inputs: ["ioClick"], outputs: ["clickBinder"] }, { kind: "directive", type: i4.UndoBinderDirective, selector: "button:ioUndo,button:[ioUndo]", inputs: ["ioUndo"] }, { kind: "directive", type: i5.RedoBinderDirective, selector: "button:ioRedo,button:[ioRedo]", inputs: ["ioRedo"] }, { kind: "pipe", type: i2.KeyValuePipe, name: "keyvalue" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: TreeHistoryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'io-tree-history', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"header\">\n  <h2>HISTORY</h2>\n  <button ioUndo class=\"button-undo-redo\">undo</button>\n  <button ioRedo class=\"button-undo-redo\">redo</button>\n</div>\n\n<div class=\"tree\" oncontextmenu=\"return false;\">\n  <div #d class=\"tree-node-history\" *ngFor=\"let position of history.getPositions() | keyvalue\"\n       [ngStyle]=\"{left: getLeft(position) + 'px', top: getTop(position) + 'px'}\"\n       [ngClass]=\"history.currentNode.id === position.key ? 'current-node' : ''\"\n       [ioClick] (clickBinder)=\"clickBinders($event, position.key)\">\n    {{undoButtonSnapshot(history.undoableNodes[position.key], d)}}\n  </div>\n</div>\n", styles: [".header{background-color:#000;min-height:75px;border-bottom-style:solid}.header h2{font-size:25px;text-align:center;padding-top:25px;padding-bottom:25px;margin:0;color:#fff}.tree-node-history{position:absolute;padding:0;border-style:solid;color:#000;background-color:#fff;border-width:thin;-webkit-user-select:none;user-select:none}.button-undo-redo{width:50%;min-height:40px;border-right-style:solid;border-left-style:solid;color:#000;background-color:#fff;border-width:thin;font-size:20px}.header button:disabled{width:50%;border-right-style:solid;border-left-style:solid;color:#000;background-color:#d3d3d3;border-width:thin;font-size:20px}.current-node{background-color:#708090}.tree{overflow:auto;width:inherit;height:inherit;position:fixed}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.TreeUndoHistory }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { width: [{
                type: Input
            }], svgViewportWidth: [{
                type: Input
            }], svgViewportHeight: [{
                type: Input
            }], svgIconSize: [{
                type: Input
            }], rootRenderer: [{
                type: Input
            }], widthcss: [{
                type: HostBinding,
                args: ['style.width']
            }] } });
//# sourceMappingURL=data:application/json;base64,