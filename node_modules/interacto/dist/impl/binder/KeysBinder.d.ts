import type { Command } from "../../api/command/Command";
import type { LogLevel } from "../../api/logging/LogLevel";
import type { Binding } from "../../api/binding/Binding";
import type { InteractionData } from "../../api/interaction/InteractionData";
import { UpdateBinder } from "./UpdateBinder";
import type { KeyInteractionCmdUpdateBinder } from "../../api/binder/KeyInteractionCmdUpdateBinder";
import type { Interaction } from "../../api/interaction/Interaction";
import type { Widget } from "../../api/binder/BaseBinderBuilder";
import type { BindingsObserver } from "../../api/binding/BindingsObserver";
import type { Logger } from "../../api/logging/Logger";
import type { AnonCmd } from "../command/AnonCmd";
import type { UndoHistoryBase } from "../../api/undo/UndoHistoryBase";
import { WhenType } from "../../api/binder/When";
export declare class KeysBinder<C extends Command, I extends Interaction<D>, D extends InteractionData> extends UpdateBinder<C, I, D> implements KeyInteractionCmdUpdateBinder<C, I, D> {
    private keysOrCodes;
    private isCode;
    constructor(undoHistory: UndoHistoryBase, logger: Logger, observer?: BindingsObserver, binder?: Partial<KeysBinder<C, I, D>>);
    private completeWhenWithKeysPredicates;
    with(isCode: boolean, ...keysOrCodes: ReadonlyArray<string>): KeysBinder<C, I, D>;
    on<W>(widget: ReadonlyArray<Widget<W>> | Widget<W>, ...widgets: ReadonlyArray<Widget<W>>): KeysBinder<C, I, D>;
    onDynamic(node: Widget<Node>): KeysBinder<C, I, D>;
    first(fn: (c: C, i: D) => void): KeysBinder<C, I, D>;
    when(fn: (() => boolean) | ((i: D) => boolean), mode?: WhenType): KeysBinder<C, I, D>;
    ifHadEffects(fn: (c: C, i: D) => void): KeysBinder<C, I, D>;
    ifHadNoEffect(fn: (c: C, i: D) => void): KeysBinder<C, I, D>;
    ifCannotExecute(fn: (c: C, i: D) => void): KeysBinder<C, I, D>;
    end(fn: (c: C, i: D) => void): KeysBinder<C, I, D>;
    log(...level: ReadonlyArray<LogLevel>): KeysBinder<C, I, D>;
    stopImmediatePropagation(): KeysBinder<C, I, D>;
    preventDefault(): KeysBinder<C, I, D>;
    then(fn: ((c: C, i: D) => void) | ((c: C) => void)): KeysBinder<C, I, D>;
    continuousExecution(): KeysBinder<C, I, D>;
    throttle(timeout: number): KeysBinder<C, I, D>;
    cancel(fn: (i: D) => void): KeysBinder<C, I, D>;
    endOrCancel(fn: (i: D) => void): KeysBinder<C, I, D>;
    catch(fn: (ex: unknown) => void): KeysBinder<C, I, D>;
    name(name: string): KeysBinder<C, I, D>;
    toProduce<C2 extends Command>(fn: (i: D) => C2): KeysBinder<C2, I, D>;
    toProduceAnon(fn: () => void): KeysBinder<AnonCmd, I, D>;
    usingInteraction<I2 extends Interaction<D2>, D2 extends InteractionData>(fn: () => I2): KeysBinder<C, I2, D2>;
    protected duplicate(): KeysBinder<C, I, D>;
    bind(): Binding<C, I, D>;
}
